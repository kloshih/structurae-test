{"version":3,"file":"object-view.js","sourceRoot":"","sources":["../src/object-view.ts"],"names":[],"mappings":"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","sourcesContent":["// deno-lint-ignore-file ban-types\nimport type { Constructor } from \"./utility-types.js\";\nimport type {\n  ComplexView,\n  ViewConstructor,\n  ViewInstance,\n  ViewLayout,\n  ViewSchema,\n} from \"./view-types.js\";\nimport type { View } from \"./view.js\";\n\nexport class ObjectView<T extends object> extends DataView\n  implements ComplexView<T> {\n  static viewLength: number;\n  static layout?: ViewLayout<unknown>;\n  static fields: Array<unknown>;\n  static defaultData?: Uint8Array;\n  static ObjectConstructor: Constructor<unknown>;\n\n  static decode<T extends object>(view: DataView, start = 0, _?: number): T {\n    const layout = this.layout as ViewLayout<T>;\n    const fields = this.fields as Array<keyof T>;\n    const result = new this.ObjectConstructor() as T;\n    for (let i = 0; i < fields.length; i++) {\n      const name = fields[i];\n      const { View, start: fieldStart, length: fieldLength } = layout[name];\n      result[name] = View.decode(view, start + fieldStart, fieldLength);\n    }\n    return result;\n  }\n\n  static encode<T extends object>(\n    value: T,\n    view: DataView,\n    start = 0,\n    length = this.viewLength,\n    amend?: boolean,\n  ): number {\n    if (!amend) {\n      new Uint8Array(view.buffer, view.byteOffset + start, length).fill(0);\n    }\n    const layout = this.layout as ViewLayout<T>;\n    const fields = this.fields as Array<keyof T>;\n    for (let i = 0; i < fields.length; i++) {\n      const name = fields[i];\n      if (Reflect.has(value, name)) {\n        const { View, start: fieldStart, length: fieldLength } = layout[name];\n        View.encode(value[name], view, start + fieldStart, fieldLength);\n      }\n    }\n    return length;\n  }\n\n  static from<T extends object, U extends ObjectView<T>>(value: T): U {\n    const objectView = new this<T>(this.defaultData!.buffer.slice(0));\n    this.encode<T>(value, objectView, 0, this.viewLength, true);\n    return objectView as U;\n  }\n\n  static getLength(): number {\n    return this.viewLength;\n  }\n\n  get<P extends keyof T>(field: P): T[P] {\n    const layout = (this.constructor as typeof ObjectView)\n      .layout as ViewLayout<T>;\n    const { start, View, length } = layout[field];\n    return View.decode(this, start, length);\n  }\n\n  getLength<P extends keyof T>(field: P): number {\n    const layout = (this.constructor as typeof ObjectView)\n      .layout as ViewLayout<T>;\n    return layout[field].length;\n  }\n\n  getView<P extends keyof T>(field: P): ViewInstance<T[P]> {\n    const layout = (this.constructor as typeof ObjectView)\n      .layout as ViewLayout<T>;\n    const { View, start, length } = layout[field];\n    return new View(this.buffer, this.byteOffset + start, length);\n  }\n\n  set<P extends keyof T>(field: P, value: T[P]) {\n    const layout = (this.constructor as typeof ObjectView)\n      .layout as ViewLayout<T>;\n    const { start, View, length } = layout[field];\n    View.encode(value, this, start, length);\n  }\n\n  setView<P extends keyof T>(field: P, view: DataView) {\n    const layout = (this.constructor as typeof ObjectView)\n      .layout as ViewLayout<T>;\n    const { start } = layout[field];\n    new Uint8Array(this.buffer, this.byteOffset, this.byteLength).set(\n      new Uint8Array(view.buffer, view.byteOffset, view.byteLength),\n      start,\n    );\n  }\n\n  toJSON(): T {\n    return (this.constructor as typeof ObjectView).decode<T>(this, 0);\n  }\n\n  static initialize<T extends object>(\n    schema: ViewSchema<T>,\n    Factory: View,\n    constructor?: Constructor<T>,\n  ): ViewConstructor<T, ComplexView<T>> {\n    const { getDefaultConstructor, getDefaultData } = Factory\n      .constructor as typeof View;\n    const fields = Object.keys(schema.properties!) as Array<keyof T>;\n    const layout = {} as ViewLayout<T>;\n    let lastOffset = 0;\n    for (const property of fields) {\n      const field = schema.properties![property];\n      const fieldLayout = Factory.getFieldLayout(\n        field,\n        lastOffset,\n        true,\n        property as string,\n      );\n      lastOffset += fieldLayout.length;\n      layout[property] = fieldLayout;\n    }\n    const defaultData = getDefaultData(layout, lastOffset, fields);\n    const ObjectConstructor = constructor ||\n      getDefaultConstructor(fields, layout);\n    return class extends this<T> {\n      static viewLength = lastOffset;\n      static layout = layout;\n      static fields = fields;\n      static defaultData = defaultData;\n      static ObjectConstructor = ObjectConstructor;\n    };\n  }\n}\n"]}