import { log2 } from "./utilities.js";
export class ArrayView extends DataView {
    get size() {
        return this.constructor.getSize(this.byteLength);
    }
    static decode(view, start = 0, length = view.byteLength) {
        const { View, itemLength } = this;
        const size = this.getSize(length);
        const array = new Array(size);
        for (let i = 0; i < size; i++) {
            const offset = this.getOffset(i);
            array[i] = View.decode(view, start + offset, itemLength);
        }
        return array;
    }
    static encode(value, view, start = 0, length = view.byteLength) {
        const { View, itemLength } = this;
        const size = this.getSize(length);
        const max = size < value.length ? size : value.length;
        for (let i = 0; i < max; i++) {
            const offset = this.getOffset(i);
            View.encode(value[i], view, start + offset, itemLength);
        }
        const written = max * itemLength;
        // zero-out remaining bytes
        let caret = written;
        while (caret < length)
            view.setUint8(start + caret++, 0);
        return written;
    }
    static from(value) {
        const view = new this(new ArrayBuffer(this.getOffset(value.length)));
        this.encode(value, view, 0, view.byteLength);
        return view;
    }
    static getLength(size) {
        return this.getOffset(size);
    }
    static getOffset(index) {
        return (index * this.itemLength) | 0;
    }
    static getSize(length) {
        return (length / this.itemLength) | 0;
    }
    static indexOf(value, view, startIndex = 0, startOffset = 0, length = view.byteLength) {
        const size = this.getSize(length);
        const valueView = this.View.from(value);
        outer: for (let i = startIndex; i < size; i++) {
            const offset = startOffset + this.getOffset(i);
            for (let j = 0; j < valueView.byteLength; j++) {
                if (valueView.getUint8(j) !== view.getUint8(offset + j))
                    continue outer;
            }
            return i;
        }
        return -1;
    }
    *[Symbol.iterator]() {
        const { size } = this;
        for (let i = 0; i < size; i++) {
            yield this.getView(i);
        }
    }
    at(index) {
        if (index < 0)
            return this.get(this.size + index);
        return this.get(index);
    }
    get(index) {
        const constructor = this.constructor;
        const View = constructor.View;
        return View.decode(this, constructor.getOffset(index));
    }
    getLength(_) {
        return this.constructor.itemLength;
    }
    getView(index) {
        const constructor = this.constructor;
        const View = constructor.View;
        return new View(this.buffer, this.byteOffset + constructor.getOffset(index), constructor.itemLength);
    }
    indexOf(value, start = 0) {
        return this.constructor.indexOf(value, this, start, 0, this.byteLength);
    }
    set(index, value) {
        const constructor = this.constructor;
        const View = constructor.View;
        View.encode(value, this, this.byteOffset + constructor.getOffset(index), constructor.itemLength);
    }
    setView(index, value) {
        const constructor = this.constructor;
        new Uint8Array(this.buffer, this.byteOffset + constructor.getOffset(index), constructor.itemLength).set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength));
    }
    toJSON() {
        return this.constructor.decode(this, 0, this.byteLength);
    }
    static initialize(schema, Factory, SchemaView, length) {
        var _a;
        const ItemView = SchemaView ?? Factory.getExistingView(schema);
        const itemLength = length ?? ItemView.viewLength;
        if (itemLength === undefined || itemLength <= 0 || itemLength >= Infinity) {
            throw TypeError("ArrayView should have fixed sized items.");
        }
        return _a = class extends this {
            },
            Object.defineProperty(_a, "View", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ItemView
            }),
            Object.defineProperty(_a, "itemLength", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: itemLength
            }),
            Object.defineProperty(_a, "offset", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: log2[itemLength]
            }),
            _a;
    }
}
Object.defineProperty(ArrayView, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 0
});
//# sourceMappingURL=array-view.js.map