{"version":3,"file":"symmetric-grid.js","sourceRoot":"","sources":["../src/symmetric-grid.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Constructor, TypedArrayConstructors } from \"./utility-types.js\";\n\n/**\n * Creates a SymmetricGrid class extending a given Array-like class.\n */\nexport function SymmetricGridMixin<\n  ItemType = number,\n  U extends Constructor<Array<ItemType>> | TypedArrayConstructors = Constructor<\n    Array<ItemType>\n  >,\n>(Base: U) {\n  /**\n   * Implements a grid to handle symmetric or triangular matrices using half the space required for a normal grid.\n   */\n  return class SymmetricGrid extends Base {\n    [key: number]: ItemType\n\n    size = 0;\n\n    static get [Symbol.species]() {\n      return Base;\n    }\n\n    /**\n     * Number of columns in the grid.\n     */\n    get columns() {\n      return this.size;\n    }\n\n    /**\n     * Specifies the number of columns of the grid.\n     */\n    set columns(columns) {\n      this.size = columns;\n    }\n\n    /**\n     * Number of rows in the grid.\n     */\n    get rows() {\n      return this.size;\n    }\n\n    /**\n     * Creates a grid of specified dimensions.\n     *\n     * @param rows the amount of rows\n     * @param columns the amount of columns\n     * @return a new grid\n     */\n    static create<T extends typeof SymmetricGrid>(\n      this: T,\n      columns: number,\n    ): InstanceType<T> {\n      const length = this.getLength(columns);\n      const grid = new this(length);\n      grid.size = columns;\n      return grid as InstanceType<T>;\n    }\n\n    /**\n     * Creates a grid from an array of arrays.\n     *\n     * @param arrays the array of arrays\n     * @return a new grid\n     */\n    static fromArrays<T extends typeof SymmetricGrid>(\n      this: T,\n      arrays: Array<Array<ItemType>>,\n    ): InstanceType<T> {\n      const rows = arrays.length;\n      const grid = this.create(rows);\n      let k = 0;\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          grid[k] = arrays[i][j];\n          k++;\n        }\n      }\n      return grid;\n    }\n\n    /**\n     * Returns the length of the underlying Array required to hold the grid of specified dimensions.\n     *\n     * @param rows the amount of rows\n     * @param columns the amount of columns\n     * @return the required length\n     */\n    static getLength(rows: number): number {\n      return ((rows + 1) * rows) >> 1;\n    }\n\n    getCoordinates(index: number): [row: number, column: number] {\n      const row = (Math.sqrt((index << 3) + 1) - 1) >> 1;\n      const column = index - ((row * (row + 1)) >> 1);\n      return [row, column];\n    }\n\n    /**\n     * Returns the index of an element at given coordinates.\n     *\n     * @param rows the row index\n     * @param columns the column index\n     * @return the element index\n     */\n    getIndex(row: number, column: number): number {\n      const [x, y] = row >= column ? [column, row] : [row, column];\n      return x + (((y + 1) * y) >> 1);\n    }\n\n    /**\n     * Returns the element at given coordinates.\n     *\n     * @param rows the row index\n     * @param columns the column index\n     * @return the element\n     */\n    getValue(row: number, column: number): ItemType {\n      return this[this.getIndex(row, column)];\n    }\n\n    /**\n     * Sets the element at given coordinates.\n     *\n     * @param rows the row index\n     * @param columns the column index\n     * @param value the element\n     * @return the grid\n     */\n    setValue(row: number, column: number, value: ItemType): this {\n      this[this.getIndex(row, column)] = value;\n      return this;\n    }\n\n    /**\n     * Creates an array of arrays representing rows of the grid.\n     *\n     * @return an array of arrays\n     */\n    toArrays(): Array<Array<ItemType>> {\n      const { rows } = this;\n      const arrays: Array<Array<ItemType>> = new Array(rows)\n        .fill(0)\n        .map(() => []);\n      let k = 0;\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          arrays[i][j] = this[k];\n          arrays[j][i] = this[k];\n          k++;\n        }\n      }\n      return arrays;\n    }\n  };\n}\n"]}