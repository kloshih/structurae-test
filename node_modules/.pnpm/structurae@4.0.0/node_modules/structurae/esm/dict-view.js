// deno-lint-ignore ban-types
export class DictView extends DataView {
    static decode(view, start = 0) {
        const { KeysView, ValuesView } = this;
        const keyLength = KeysView.itemLength;
        const size = ValuesView.getSize(view, start);
        const keysOffset = view.getUint32(start + ((1 + size) << 2), true);
        const result = {};
        for (let i = 0; i < size; i++) {
            const key = KeysView.View.decode(view, start + keysOffset + i * keyLength, keyLength);
            const valueOffset = ValuesView.getOffset(i, view, start);
            const value = !valueOffset
                ? undefined
                : ValuesView.View.decode(view, start + valueOffset[0], valueOffset[1]);
            result[key] = value;
        }
        return result;
    }
    static encode(value, view, start = 0, length) {
        const { KeysView, ValuesView } = this;
        const keys = Object.keys(value);
        const requiredLength = keys.length * KeysView.itemLength;
        const maxLength = length ? length - requiredLength : undefined;
        let written = ValuesView.encode(Object.values(value), view, start, maxLength);
        written += KeysView.encode(keys, view, start + written, requiredLength);
        return written;
    }
    // deno-lint-ignore ban-types
    static from(value) {
        const end = this.encode(value, this.maxView, 0, undefined);
        return new this(this.maxView.buffer.slice(0, end));
    }
    static getLength(value) {
        const { KeysView, ValuesView } = this;
        const keyLength = KeysView.itemLength;
        // required length
        let length = 4 + Object.keys(value).length * keyLength;
        length += ValuesView.getLength(Object.values(value));
        return length;
    }
    get(key) {
        const offset = this.getOffset(key);
        return offset
            ? this.constructor.ValuesView
                .View.decode(this, offset[0], offset[1])
            : undefined;
    }
    getLength(key) {
        const offset = this.getOffset(key);
        return offset ? offset[1] : 0;
    }
    getOffset(key) {
        const index = this.indexOf(key);
        if (!~index)
            return undefined;
        return this.constructor.ValuesView.getOffset(index, this, 0);
    }
    getView(key) {
        const offset = this.getOffset(key);
        return offset
            ? new this.constructor.ValuesView
                .View(this.buffer, this.byteOffset + offset[0], offset[1])
            : undefined;
    }
    indexOf(key) {
        const { KeysView } = this.constructor;
        const amount = this.getUint32(0, true);
        const keysOffset = this.getUint32((1 + amount) << 2, true);
        return KeysView.indexOf(key, this, 0, keysOffset, amount * KeysView.itemLength);
    }
    set(key, value) {
        const offset = this.getOffset(key);
        if (!offset)
            return undefined;
        this.constructor.ValuesView
            .View.encode(value, this, this.byteOffset + offset[0], offset[1]);
        return;
    }
    setView(key, value) {
        const offset = this.getOffset(key);
        if (!offset)
            return undefined;
        new Uint8Array(this.buffer, this.byteOffset + offset[0], offset[1]).set(new Uint8Array(value.buffer, value.byteOffset, value.byteLength));
        return;
    }
    toJSON() {
        return this.constructor.decode(this);
    }
    // deno-lint-ignore ban-types
    static initialize(schema, Factory) {
        var _a;
        const keySchema = schema.propertyNames;
        const valueSchema = schema.additionalProperties;
        const KeysView = Factory.getArrayView(keySchema, undefined, keySchema.maxLength);
        const ValuesView = Factory.Views.get("vector").initialize(valueSchema, Factory, valueSchema.type === "array"
            ? Factory.getArray(valueSchema)[0]
            : undefined);
        return _a = class extends this {
            },
            Object.defineProperty(_a, "maxView", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Factory.maxView
            }),
            Object.defineProperty(_a, "KeysView", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: KeysView
            }),
            Object.defineProperty(_a, "ValuesView", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ValuesView
            }),
            _a;
    }
}
Object.defineProperty(DictView, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 0
});
//# sourceMappingURL=dict-view.js.map