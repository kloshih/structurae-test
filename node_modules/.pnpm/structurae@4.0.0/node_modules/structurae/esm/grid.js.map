{"version":3,"file":"grid.js","sourceRoot":"","sources":["../src/grid.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Constructor, TypedArrayConstructors } from \"./utility-types.js\";\nimport { getLog2 } from \"./utilities.js\";\n\n/**\n * Creates a Grid class extending a given Array-like class.\n */\nexport function GridMixin<\n  ItemType = number,\n  U extends Constructor<Array<ItemType>> | TypedArrayConstructors = Constructor<\n    Array<ItemType>\n  >,\n>(Base: U) {\n  /**\n   * Extends built-in indexed collections to handle 2 dimensional data.\n   */\n  return class Grid extends Base {\n    [key: number]: ItemType\n\n    size = 0;\n\n    static get [Symbol.species]() {\n      return Base;\n    }\n\n    /**\n     * Number of columns in the grid.\n     */\n    get columns() {\n      return 1 << this.size;\n    }\n\n    /**\n     * Specifies the number of columns of the grid.\n     */\n    set columns(columns) {\n      this.size = getLog2(columns);\n    }\n\n    /**\n     * Number of rows in the grid.\n     */\n    get rows() {\n      //@ts-ignore 2339\n      return this.length >> this.size;\n    }\n\n    /**\n     * Creates a grid of specified dimensions.\n     *\n     * @param rows the amount of rows\n     * @param columns the amount of columns\n     * @return a new grid\n     */\n    static create<T extends typeof Grid>(\n      this: T,\n      rows: number,\n      columns = 1,\n    ): InstanceType<T> {\n      const offset = getLog2(columns);\n      const length = rows << offset;\n      const grid = new this(length);\n      grid.size = offset;\n      return grid as InstanceType<T>;\n    }\n\n    /**\n     * Creates a grid from an array of arrays.\n     *\n     * @param arrays the array of arrays\n     * @return a new grid\n     */\n    static fromArrays<T extends typeof Grid>(\n      this: T,\n      arrays: Array<Array<ItemType>>,\n    ): InstanceType<T> {\n      const rows = arrays.length;\n\n      // find longest array to get the column size\n      let columns = arrays[0].length; // if !arrays[0].length\n      for (let i = 0; i < rows; i++) {\n        if (arrays[i].length > columns) columns = arrays[i].length;\n      }\n      const offset = getLog2(columns);\n      columns = 1 << offset;\n\n      // create grid of the required length\n      const grid = this.create(rows, columns);\n\n      // fill the grid with values from arrays\n      for (let i = 0; i < rows; i++) {\n        const rowId = i << offset;\n        for (let j = 0; j < arrays[i].length; j++) {\n          grid[rowId + j] = arrays[i][j];\n        }\n      }\n\n      return grid;\n    }\n\n    /**\n     * Returns the length of the underlying Array required to hold the grid of specified dimensions.\n     *\n     * @param rows the amount of rows\n     * @param columns the amount of columns\n     * @return the required length\n     */\n    static getLength(rows: number, columns = 1): number {\n      return rows << getLog2(columns);\n    }\n\n    getCoordinates(index: number): [row: number, column: number] {\n      return [index >> this.size, index & ((1 << this.size) - 1)];\n    }\n\n    /**\n     * Returns the index of an element at given coordinates.\n     *\n     * @param rows the row index\n     * @param columns the column index\n     * @return the element index\n     */\n    getIndex(row: number, column = 1): number {\n      return (row << this.size) + column;\n    }\n\n    /**\n     * Returns the element at given coordinates.\n     *\n     * @param rows the row index\n     * @param columns the column index\n     * @return the element\n     */\n    getValue(row: number, column: number): ItemType {\n      return this[this.getIndex(row, column)];\n    }\n\n    /**\n     * Sets the element at given coordinates.\n     *\n     * @param rows the row index\n     * @param columns the column index\n     * @param value the element\n     * @return the grid\n     */\n    setValue(row: number, column: number, value: ItemType): this {\n      this[this.getIndex(row, column)] = value;\n      return this;\n    }\n\n    /**\n     * Creates an array of arrays representing rows of the grid.\n     *\n     * @return an array of arrays\n     */\n    toArrays(): Array<Array<ItemType>> {\n      const { rows, columns, size } = this;\n      const result: Array<Array<ItemType>> = [];\n      for (let i = 0; i < rows; i++) {\n        const rowOffset = i << size;\n        result[i] = [];\n        for (let j = 0; j < columns; j++) {\n          result[i][j] = this[rowOffset + j];\n        }\n      }\n      return result;\n    }\n  };\n}\n"]}