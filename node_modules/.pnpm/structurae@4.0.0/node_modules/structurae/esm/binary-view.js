export class BinaryView extends DataView {
    static decode(view, start = 0, length = view.byteLength) {
        return new Uint8Array(view.buffer.slice(view.byteOffset + start, view.byteOffset + start + length));
    }
    static encode(value, view, start = 0, length) {
        const size = !length || value.byteLength < length
            ? value.byteLength
            : length;
        new Uint8Array(view.buffer, view.byteOffset, view.byteLength).set(new Uint8Array(value.buffer, value.byteOffset, size), start);
        return size;
    }
    static from(value) {
        return new this(value.buffer, value.byteOffset, value.byteLength);
    }
    static getLength(size) {
        return size;
    }
    get() {
        return this.constructor.decode(this);
    }
    set(value) {
        this.constructor.encode(value, this);
    }
    toJSON() {
        return this.get();
    }
    static initialize() {
        return this;
    }
}
Object.defineProperty(BinaryView, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 0
});
//# sourceMappingURL=binary-view.js.map