{"version":3,"file":"binary-grid.js","sourceRoot":"","sources":["../src/binary-grid.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Bit } from \"./utility-types.js\";\nimport { getLog2 } from \"./utilities.js\";\n\n/**\n * Implements a grid or 2D matrix of bits.\n */\nexport class BinaryGrid extends Uint32Array {\n  size = 0;\n\n  static get [Symbol.species](): Uint32ArrayConstructor {\n    return Uint32Array;\n  }\n\n  /**\n   * Number of columns in the grid.\n   */\n  get columns(): number {\n    return 1 << this.size;\n  }\n\n  /**\n   * Specifies the number of columns of the grid.\n   */\n  set columns(columns: number) {\n    this.size = getLog2(columns);\n  }\n\n  /**\n   * Number of rows in the grid.\n   */\n  get rows(): number {\n    return (this.length << 5) >> this.size;\n  }\n\n  /**\n   * Creates a binary grid of specified dimensions.\n   *\n   * @param rows the amount of rows\n   * @param columns the amount of columns\n   * @return a new binary grid\n   */\n  static create(rows: number, columns = 1): BinaryGrid {\n    const offset = getLog2(columns);\n    const length = (rows << offset) >> 5;\n    const grid = new this(length || 1);\n    grid.size = offset;\n    return grid;\n  }\n\n  /**\n   * Creates a new binary grid from an array of arrays representing rows and item value of the grid.\n   *\n   * @param arrays the array of arrays\n   * @return a new binary grid\n   */\n  static fromArrays(arrays: Array<Array<Bit>>): BinaryGrid {\n    const rows = arrays.length;\n\n    // find longest array to get the column size\n    let columns = arrays[0].length; // if !arrays[0].length\n    for (let i = 0; i < rows; i++) {\n      if (arrays[i].length > columns) columns = arrays[i].length;\n    }\n    // create grid of the required length\n    const grid = this.create(rows, columns);\n    grid.size = getLog2(columns);\n\n    // fill the grid with values from arrays\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < arrays[i].length; j++) {\n        grid.setValue(i, j, arrays[i][j]);\n      }\n    }\n\n    return grid;\n  }\n\n  /**\n   * Returns the length of the underlying TypedArray required to hold a grid of specified dimensions.\n   *\n   * @param rows the amount of rows\n   * @param columns the amount of columns\n   * @return the required length\n   */\n  static getLength(rows: number, columns = 1): number {\n    return (rows << getLog2(columns)) >> 5;\n  }\n\n  getCoordinates(row: number, column = 1): [bucket: number, position: number] {\n    const index = (row << this.size) + column;\n    const bucket = index >> 5;\n    return [bucket, index - (bucket << 5)];\n  }\n\n  /**\n   * Returns the index of an item holding the bit at given coordinates.\n   *\n   * @param rows the row index\n   * @param columns the column index\n   * @return the item index\n   */\n  getIndex(row: number, column = 1): number {\n    const index = (row << this.size) + column;\n    return index >> 5;\n  }\n\n  /**\n   * Returns the bit at given coordinates.\n   *\n   * @param rows the row index\n   * @param columns the column index\n   * @return the bit\n   */\n  getValue(row: number, column: number): Bit {\n    const [bucket, position] = this.getCoordinates(row, column);\n    return ((this[bucket] >> position) & 1) as Bit;\n  }\n\n  /**\n   * Sets the bit at given coordinates.\n   *\n   * @param rows the row index\n   * @param columns the column index\n   * @param value the bit\n   * @return the grid\n   */\n  setValue(row: number, column: number, value: Bit = 1): this {\n    const [bucket, position] = this.getCoordinates(row, column || 0);\n    this[bucket] = (this[bucket] & ~(1 << position)) | (value << position);\n    return this;\n  }\n\n  /**\n   * Creates an array of arrays representing rows of the grid.\n   *\n   * @return an array of arrays\n   */\n  toArrays(): Array<Array<Bit>> {\n    const { rows, columns } = this;\n    const result: Array<Array<Bit>> = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n      result[i] = new Array(columns);\n      for (let j = 0; j < columns; j++) {\n        result[i][j] = this.getValue(i, j);\n      }\n    }\n    return result;\n  }\n}\n"]}