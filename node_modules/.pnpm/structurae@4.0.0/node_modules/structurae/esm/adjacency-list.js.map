{"version":3,"file":"adjacency-list.js","sourceRoot":"","sources":["../src/adjacency-list.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AdjacencyStructure,\n  AdjacencyStructureConstructor,\n  IndexedCollection,\n  TypedArrayConstructors,\n} from \"./utility-types.js\";\n\n/**\n * Creates an Adjacency List class extending a given TypedArray class.\n *\n * @param Base a TypedArray class to extend\n */\nexport function AdjacencyListMixin<U extends TypedArrayConstructors>(\n  Base: U,\n): AdjacencyStructureConstructor<U> {\n  // deno-lint-ignore no-empty-interface\n  interface AdjacencyList extends IndexedCollection {}\n\n  /**\n   * Implements the Adjacency List data structure for weighted directed graphs.\n   */\n  class AdjacencyList extends Base implements AdjacencyStructure {\n    static directed = true;\n    static weighted = true;\n    vertices = 2;\n    edges = 4;\n    empty = undefined;\n\n    // deno-lint-ignore no-explicit-any\n    constructor(...args: any[]) {\n      super(...args);\n      [this.vertices, this.edges] = AdjacencyList.getDimensions(this);\n    }\n\n    static get [Symbol.species](): U {\n      return Base;\n    }\n\n    static create(vertices: number, edges: number) {\n      const length = this.getLength(vertices, edges);\n      const list = new this(length);\n      list.vertices = vertices;\n      list.edges = edges;\n      list.setOffsets();\n      return list as unknown as AdjacencyList & InstanceType<U>;\n    }\n\n    /*\n    * Returns the dimensions, vertices and maximum edge count, of an existing AdjacencyList\n    */\n    static getDimensions(\n      list: IndexedCollection,\n    ): [vertices: number, edges: number] {\n      let vertices = 0;\n      while (list[vertices] <= list[vertices + 1]) {\n        vertices++;\n      }\n      const edges = (list.length - vertices - 1) >> 1;\n      return [vertices, edges];\n    }\n\n    static getLength(vertices: number, edges: number): number {\n      return vertices + (edges << 1) + 1;\n    }\n\n    // TODO document RangeError\n    addEdge(x: number, y: number, weight: number): this {\n      if (this.hasEdge(x, y)) return this;\n      // the list is full\n      if (this.isFull()) throw new RangeError(\"The list is full.\");\n      const { vertices } = this;\n\n      // shift values\n      for (let i = this[vertices]; i > this[x]; i -= 2) {\n        [this[i], this[i + 1], this[i - 1], this[i - 2]] = [\n          this[i - 2],\n          this[i - 1],\n          this[i],\n          this[i + 1],\n        ];\n      }\n      // set edge\n      this[this[x]] = y;\n      this[this[x] + 1] = weight;\n\n      // update offsets\n      for (let i = x + 1; i <= vertices; i++) {\n        this[i] += 2;\n      }\n      return this;\n    }\n\n    getEdge(x: number, y: number): number {\n      const offset = this[x];\n      const nextOffset = this[x + 1];\n      // no out edges from x\n      if (offset === nextOffset) return NaN;\n      for (let i = offset; i < nextOffset; i += 2) {\n        if (this[i] === y) return this[i + 1];\n      }\n      return NaN;\n    }\n\n    hasEdge(x: number, y: number): boolean {\n      return !Number.isNaN(this.getEdge(x, y));\n    }\n\n    *inEdges(vertex: number) {\n      const { vertices } = this;\n      let edge = 0;\n      let nextVertex = 1;\n      for (let i = vertices + 1; i < this[vertices]; i += 2) {\n        while (i >= this[nextVertex]) {\n          edge++;\n          nextVertex++;\n        }\n        if (this[i] === vertex) yield edge;\n      }\n    }\n\n    isFull(): boolean {\n      return this[this.vertices] >= this.length;\n    }\n\n    *outEdges(vertex: number) {\n      const offset = this[vertex];\n      const nextOffset = this[vertex + 1];\n      if (offset !== nextOffset) {\n        for (let i = nextOffset - 2; i >= offset; i -= 2) {\n          yield this[i];\n        }\n      }\n    }\n\n    removeEdge(x: number, y: number): this {\n      const offset = this[x];\n      const nextOffset = this[x + 1];\n      // no out edges from x\n      if (offset === nextOffset) return this;\n      let edgeIndex = 0;\n      for (let i = offset; i < nextOffset; i += 2) {\n        if (this[i] === y) {\n          edgeIndex = i;\n          break;\n        }\n      }\n      // there is no such edge\n      if (!edgeIndex) return this;\n      // shift value\n      for (let i = edgeIndex; i < this[this.vertices]; i += 2) {\n        this[i] = this[i + 2];\n        this[i + 1] = this[i + 3];\n      }\n\n      // update offsets\n      for (let i = x + 1; i <= this.vertices; i++) {\n        this[i] -= 2;\n      }\n\n      return this;\n    }\n\n    setOffsets(): void {\n      const lastElement = this.vertices + 1;\n      for (let i = 0; i < lastElement; i++) {\n        this[i] = lastElement;\n      }\n    }\n  }\n\n  return AdjacencyList;\n}\n"]}