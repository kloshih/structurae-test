{"version":3,"file":"view-types.js","sourceRoot":"","sources":["../src/view-types.ts"],"names":[],"mappings":"","sourcesContent":["// deno-lint-ignore-file ban-types\nimport { Constructor } from \"./utility-types.js\";\n\nexport interface PrimitiveView<T> extends DataView {\n  /**\n   * Returns the JavaScript value of the view.\n   */\n  get(): T;\n\n  /**\n   * Sets the JavaScript value of the view.\n   */\n  set(value: T): void;\n\n  /**\n   * Returns the JavaScript value of the view.\n   */\n  toJSON(): T;\n}\n\nexport interface ContainerView<T> extends DataView {\n  /**\n   * The amount of items in the view.\n   */\n  size: number;\n  [Symbol.iterator](): Generator<ViewInstance<T> | undefined>;\n\n  /**\n   * Get the JavaScript value of an item.\n   *\n   * @param index the of the item.\n   */\n  at(index: number): T | undefined;\n\n  /**\n   * Get the JavaScript value of an item.\n   *\n   * @param index the index of the item\n   * @return the item\n   */\n  get(index: number): T | undefined;\n\n  /**\n   * Returns the byte length of an item at a given index.\n   *\n   * @param index the index of the item\n   * @return the byte length\n   */\n  getLength(index: number): number;\n\n  /**\n   * Returns the view of an item at a given index\n   *\n   * @param index the index of the item\n   * @return a view of the item\n   */\n  getView(index: number): ViewInstance<T> | undefined;\n\n  /**\n   * Returns the index within the view of the first occurrence\n   * of the specified value, starting the search at start.\n   * Returns -1 if the value is not found.\n   *\n   * @param value the to search for\n   * @return index of the value or -1 if not found\n   */\n  indexOf(value: T, start?: number): number;\n\n  /**\n   * Sets a given JavaScript value to an item at a given index.\n   *\n   * @param index the index of the item\n   * @param value the JavaScript value to set\n   */\n  set(index: number, value: T): void;\n\n  /**\n   * Sets a given view to an item at a given index.\n   *\n   * @param index the index of the item\n   * @param view the view to set\n   */\n  setView(index: number, view: DataView): void;\n\n  /**\n   * Returns the JavaScript value of the view.\n   *\n   * @return the javascript value\n   */\n  toJSON(): Array<T | undefined>;\n}\n\nexport interface ComplexView<T> extends DataView {\n  /**\n   * Returns the JavaScript value of a given field.\n   *\n   * @param field the field name\n   * @return the JavaScript value\n   */\n  get<P extends keyof T>(field: P): T[P] | undefined;\n\n  /**\n   * Returns the byte length of a given field.\n   *\n   * @param field the field name\n   * @return the byte length\n   */\n  getLength<P extends keyof T>(field: P): number;\n\n  /**\n   * Returns the view of a field.\n   *\n   * @param field the field name\n   * @return the view\n   */\n  getView<P extends keyof T>(field: P): ViewInstance<T[P]> | undefined;\n\n  /**\n   * Set a JavaScript value to a field.\n   *\n   * @param field the field name\n   * @param value the JavaScript value\n   */\n  set<P extends keyof T>(field: P, value: T[P]): void;\n\n  /**\n   * Set a view to a given field.\n   *\n   * @param field the field name\n   * @param view the view\n   */\n  setView<P extends keyof T>(field: P, view: DataView): void;\n\n  /**\n   * Returns the JavaScript value of the view.\n   *\n   * @return the javascript value\n   */\n  toJSON(): T;\n}\n\nexport type ViewInstance<T> = [T] extends\n  [boolean | number | string | bigint | ArrayBufferLike] ? PrimitiveView<T>\n  : T extends Array<infer U> ? ContainerView<U>\n  : T extends object ? ComplexView<T>\n  : never;\n\nexport interface ViewConstructor<T, Instance = ViewInstance<T>> {\n  /**\n   * The byte length of the view.\n   */\n  viewLength: number;\n\n  /**\n   * The byte length of an item inside the container view.\n   */\n  itemLength?: number;\n  layout?: ViewLayout<T>;\n  defaultData?: Uint8Array;\n  ObjectConstructor?: Constructor<T>;\n  View?: unknown;\n\n  // deno-lint-ignore no-explicit-any\n  new (...args: any[]): Instance;\n\n  /**\n   * Decodes a given view into corresponding JavaScript value.\n   *\n   * @param view the view to decode\n   * @param start the starting offset\n   * @param length the byte length to decode\n   * @return the JavaScript value\n   */\n  decode(view: DataView, start?: number, length?: number): T;\n\n  /**\n   * Encodes a JavaScript value into a given view.\n   *\n   * @param value the value encode\n   * @param view the view to encode into\n   * @param start the offset to start encoding\n   * @param length the byte length to encode\n   * @return the amount of written bytes\n   */\n  encode(value: T, view: DataView, start?: number, length?: number): number;\n\n  /**\n   * Creates a view from a given JavaScript value.\n   *\n   * @param value the JavaScript value\n   */\n  from(value: T): Instance;\n\n  /**\n   * Returns the length of the view.\n   *\n   * @param size the amount of items for ArrayView or the value for MapView and VectorView\n   */\n  getLength(size?: number | unknown): number;\n\n  /**\n   * Intializes a view class, used for complex and container views.\n   */\n  initialize(...args: Array<unknown>): UnknownViewConstructor;\n}\n\nexport type UnknownViewConstructor = ViewConstructor<\n  unknown,\n  PrimitiveView<unknown> | ContainerView<unknown> | ComplexView<unknown>\n>;\n\nexport type ViewFieldLayout<T> = {\n  View: ViewConstructor<T>;\n  start: number;\n  length: number;\n  default?: T;\n  required?: boolean;\n};\n\nexport type ViewLayout<T> = {\n  [key in keyof T]: ViewFieldLayout<T[key]>;\n};\n\nexport type ViewSchemaPrimitiveType =\n  | \"string\"\n  | \"number\"\n  | \"integer\"\n  | \"boolean\";\n\nexport type ViewSchemaNumberType =\n  | \"int8\"\n  | \"uint8\"\n  | \"int16\"\n  | \"uint16\"\n  | \"int32\"\n  | \"uint32\"\n  | \"float32\"\n  | \"float64\"\n  | \"bigint64\"\n  | \"biguint64\";\n\nexport interface ViewSchema<T> {\n  $id?: string;\n  $ref?: `#${string}`;\n  maxLength?: number;\n  minLength?: number;\n  minimum?: number;\n  maximum?: number;\n  items?: T extends Array<infer U> ? ViewSchema<U> : never;\n  maxItems?: number;\n  minItems?: number;\n  required?: Array<keyof T>;\n  properties?: {\n    [P in keyof T]: ViewSchema<T[P]>;\n  };\n  propertyNames?: ViewSchema<number> | ViewSchema<string>;\n  additionalProperties?: ViewSchema<T[keyof T]>;\n  type: [T] extends [number | bigint | undefined] ? \"number\" | \"integer\"\n    : [T] extends [string | ArrayBufferLike | undefined] ? \"string\"\n    : [T] extends [boolean | undefined] ? \"boolean\"\n    : T extends Array<unknown> ? \"array\"\n    : T extends object ? \"object\"\n    : never;\n  btype?: T extends number ? ViewSchemaNumberType\n    : T extends ArrayBufferLike ? \"binary\"\n    : T extends Array<unknown> ? \"vector\"\n    : T extends object ? \"map\" | \"dict\"\n    : never;\n  default?: T;\n}\n"]}