{"version":3,"file":"string-view.js","sourceRoot":"","sources":["../src/string-view.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IndexedCollection } from \"./utility-types.js\";\nimport type { PrimitiveView, ViewConstructor } from \"./view-types.js\";\n\nexport class StringView extends DataView implements PrimitiveView<string> {\n  static viewLength = 0;\n  static masks = new Int8Array(256).fill(-1);\n  static decoder = new TextDecoder();\n  static encoder = new TextEncoder();\n\n  /**\n   * The amount of UTF characters in the StringView.\n   */\n  get size() {\n    let size = 0;\n    for (let i = 0; i < this.byteLength; i++) {\n      if (this.getUint8(i) >> 6 !== 2) size++;\n    }\n    return size;\n  }\n\n  /**\n   * Converts a UTF8 byte array into a JS string.\n   * Adopted from Google Closure:\n   * https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\n   *\n   * @param view the view to decode\n   * @param start the starting offset\n   * @param length the byte length to decode\n   * @return the JavaScript value\n   */\n  static decode(view: DataView, start = 0, length = view.byteLength): string {\n    if (length > 200) {\n      const arrayOffset = view.byteOffset + start;\n      const arrayLength = length === view.byteLength\n        ? length - arrayOffset\n        : length;\n      return this.decoder.decode(\n        new Uint8Array(view.buffer, arrayOffset, arrayLength),\n      );\n    }\n    const out = [];\n    const end = start + length;\n    let pos = start;\n    let c = 0;\n    while (pos < end) {\n      const c1 = view.getUint8(pos++);\n      // bail on zero byte\n      if (c1 === 0) break;\n      if (c1 < 128) {\n        out[c++] = c1;\n      } else if (c1 > 191 && c1 < 224) {\n        out[c++] = ((c1 & 31) << 6) | (view.getUint8(pos++) & 63);\n      } else if (c1 > 239 && c1 < 365) {\n        // Surrogate Pair\n        const u = (((c1 & 7) << 18) |\n          ((view.getUint8(pos++) & 63) << 12) |\n          ((view.getUint8(pos++) & 63) << 6) |\n          (view.getUint8(pos++) & 63)) -\n          0x10000;\n        out[c++] = 0xd800 + (u >> 10);\n        out[c++] = 0xdc00 + (u & 1023);\n      } else {\n        out[c++] = ((c1 & 15) << 12) |\n          ((view.getUint8(pos++) & 63) << 6) |\n          (view.getUint8(pos++) & 63);\n      }\n    }\n    return String.fromCharCode.apply(String, out);\n  }\n\n  /**\n   * Converts a JS string into a UTF8 byte array.\n   * Adopted from Deno:\n   * https://github.com/denoland/deno/blob/18a684ab1c20914e13c27bc10e20bda6396ea38d/extensions/web/08_text_encoding.js#L79\n   *\n   * @param value the value to encode\n   * @param view the view to encode into\n   * @param start the view offset to start\n   * @param length the byte length to encode\n   * @return the amount of written bytes\n   */\n  static encode(\n    value: string,\n    view: DataView,\n    start = 0,\n    length?: number,\n  ): number {\n    let written = 0;\n    const valueLength = value.length;\n    const byteLength = length ?? (valueLength << 1) + valueLength;\n    if (byteLength > 300) {\n      ({ written } = this.encoder.encodeInto(\n        value,\n        new Uint8Array(view.buffer, view.byteOffset + start, length),\n      ));\n    } else {\n      let read = 0;\n      const maxLength = Math.min(byteLength, view.byteLength);\n      while (read < valueLength) {\n        const badCodePoint = 0xfffd;\n        const codeUnit = value.charCodeAt(read++);\n        const surrogateMask = codeUnit & 0xfc00;\n        let codePoint = codeUnit;\n        if (surrogateMask === 0xd800) {\n          if (read < valueLength) {\n            const nextCodeUnit = value.charCodeAt(read);\n            if ((nextCodeUnit & 0xfc00) === 0xdc00) {\n              codePoint = 0x10000 + ((codeUnit & 0x3ff) << 10) +\n                (nextCodeUnit & 0x3ff);\n              read++;\n            } else {\n              codePoint = badCodePoint;\n            }\n          } else {\n            codePoint = badCodePoint;\n          }\n        } else if (surrogateMask === 0xdc00) {\n          codePoint = badCodePoint;\n        }\n        const availableSpace = maxLength - written;\n        if (availableSpace < 4) {\n          if (\n            availableSpace < 1 ||\n            (availableSpace < 2 && codePoint >= 0x80) ||\n            (availableSpace < 3 && codePoint >= 0x800) ||\n            codePoint >= 0x10000\n          ) {\n            const isSurrogatePair = codePoint !== codeUnit &&\n              codePoint !== badCodePoint;\n            read -= isSurrogatePair ? 2 : 1;\n            break;\n          }\n        }\n\n        if (codePoint < 0x80) {\n          view.setUint8(start + written++, codePoint);\n        } else if (codePoint < 0x800) {\n          view.setUint8(start + written++, 0xc0 | (0x1f & (codePoint >> 6)));\n          view.setUint8(start + written++, 0x80 | (0x3f & codePoint));\n        } else if (codePoint < 0x10000) {\n          view.setUint8(start + written++, 0xe0 | (0x0f & (codePoint >> 12)));\n          view.setUint8(start + written++, 0x80 | (0x3f & (codePoint >> 6)));\n          view.setUint8(start + written++, 0x80 | (0x3f & codePoint));\n        } else {\n          view.setUint8(start + written++, 0xf0 | (0x07 & (codePoint >> 18)));\n          view.setUint8(start + written++, 0x80 | (0x3f & (codePoint >> 12)));\n          view.setUint8(start + written++, 0x80 | (0x3f & (codePoint >> 6)));\n          view.setUint8(start + written++, 0x80 | (0x3f & codePoint));\n        }\n      }\n    }\n    if (length) {\n      // zero-out remaining bytes if length is provided\n      let caret = written;\n      while (caret < length) view.setUint8(start + caret++, 0);\n    }\n    return written;\n  }\n\n  /**\n   * Creates a StringView from a string or an array like object.\n   *\n   * @param value the string to encode\n   * @return the new view\n   */\n  static from(value: string): StringView {\n    const length = this.getLength(value);\n    const view = new this(new ArrayBuffer(length));\n    this.encode(value, view);\n    return view;\n  }\n\n  /**\n   * Returns the size in bytes of a given string.\n   *\n   * @param string the string to check\n   * @return the size in bytes\n   */\n  static getLength(string = \"\"): number {\n    let size = 0;\n    for (let i = 0; i < string.length; i++) {\n      const code = string.codePointAt(i)!; // todo test\n      if (code < 0x0080) size += 1;\n      // 1-byte\n      else if (code < 0x0800) size += 2;\n      // 2-byte\n      else if (code < 0x10000) size += 3;\n      // 3-byte\n      else {\n        // 4-byte\n        size += 4;\n        i++;\n      }\n    }\n    return size;\n  }\n\n  /**\n   * Returns a new string consisting of the single UTF character\n   * located at the specified character index.\n   *\n   * @param index a character index\n   * @return a string representing the character\n   */\n  charAt(index = 0): string {\n    return this.toChar(this.getCharStart(index));\n  }\n\n  /**\n   * Iterates over the characters in the StringView.\n   */\n  *characters(): Generator<string, void, unknown> {\n    for (let i = 0; i < this.byteLength; i++) {\n      if (this.getUint8(i) >> 6 !== 2) {\n        yield this.toChar(i);\n      }\n    }\n  }\n\n  /**\n   * Returns the string encoded in the StringView.\n   */\n  get(): string {\n    return (this.constructor as typeof StringView).decode(this);\n  }\n\n  /**\n   * Returns the index of the first byte of a character.\n   *\n   * @param index a character index\n   * @return the index of the first byte of a character\n   */\n  getCharStart(index: number, startCharIndex = -1, startIndex = 0): number {\n    let current = startCharIndex;\n    for (let i = startIndex; i < this.byteLength; i++) {\n      if (this.getUint8(i) >> 6 !== 2) current++;\n      if (current === index) return i;\n    }\n    return -1;\n  }\n\n  /**\n   * Performs an in-place replacement within the StringView\n   * of all occurrences of a given pattern with a given replacement.\n   *\n   * @param pattern the pattern to be replaced\n   * @param replacement the replacement\n   * @return this\n   */\n  replace(pattern: IndexedCollection, replacement: IndexedCollection): this {\n    let position = 0;\n    while (position < this.byteLength) {\n      const currentIndex = this.indexOf(pattern, position);\n      if (!~currentIndex) break;\n      new Uint8Array(this.buffer).set(replacement, currentIndex);\n      position = currentIndex + replacement.length;\n    }\n    return this;\n  }\n\n  /**\n   * Reverses the characters of the StringView in-place.\n   *\n   * @return this\n   */\n  reverse(): this {\n    const last = this.byteLength - 1;\n    for (let i = 0, j = last; i < j; i++, j--) {\n      this.swapChar(i, j);\n    }\n    let j = this.byteLength;\n    while (--j > 0) {\n      switch ((this.getUint8(j) & 0xf0) >> 4) {\n        case 0xf:\n          this.swapChar(j, j - 3);\n          this.swapChar(j - 1, j - 2);\n          j -= 3;\n          break;\n        case 0xe:\n          this.swapChar(j, j - 2);\n          j -= 2;\n          break;\n        case 0xc:\n        case 0xd:\n          this.swapChar(j, j - 1);\n          j--;\n          break;\n        default:\n          break;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Checks whether the provided encoded sequence is found inside the view.\n   *\n   * @param searchValue the value to search for\n   * @param position the starting position\n   * @return whether the value is found\n   */\n  includes(searchValue: IndexedCollection, position?: number): boolean {\n    return this.indexOf(searchValue, position) !== -1;\n  }\n\n  /**\n   * Returns the index within the StringView\n   * of the first occurrence of the specified value, starting the search at start.\n   * Returns -1 if the value is not found.\n   *\n   * @param searchValue the value to search for\n   * @param fromIndex the index at which to start the search\n   * @return the index of the first occurrence of the specified value\n   */\n  indexOf(searchValue: IndexedCollection, fromIndex = 0): number {\n    if (this.byteLength > 256 && searchValue.length < 32) {\n      return this.searchShiftOr(searchValue, fromIndex);\n    }\n    return this.searchNaive(searchValue, fromIndex);\n  }\n\n  searchNaive(searchValue: IndexedCollection, start: number): number {\n    const wordLength = searchValue.length;\n    const max = this.byteLength - wordLength;\n    outer:\n    for (let i = start; i <= max; i++) {\n      for (let j = 0; j < wordLength; j++) {\n        if (this.getUint8(i + j) !== searchValue[j]) {\n          continue outer;\n        }\n      }\n      return i;\n    }\n    return -1;\n  }\n\n  searchShiftOr(searchValue: IndexedCollection, start: number): number {\n    const { masks } = this.constructor as typeof StringView;\n    const m = searchValue.length;\n    const m1 = 1 << m;\n    masks.fill(-1);\n    let r = -2;\n    for (let i = 0; i < m; i++) {\n      masks[searchValue[i]] &= ~(1 << i);\n    }\n    for (let i = start; i < this.byteLength; i++) {\n      r |= masks[this.getUint8(i)];\n      r <<= 1;\n      if ((r & m1) === 0) {\n        return i - m + 1;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Encodes a given string into the StringView\n   */\n  set(value: string): void {\n    (this.constructor as typeof StringView).encode(\n      value,\n      this,\n      0,\n      this.byteLength,\n    );\n  }\n\n  /**\n   * Returns a string of characters between the start and end\n   * character indexes, or to the end of the string.\n   *\n   * @param indexStart the character index of the first character to include\n   * @param indexEnd the character index of the first character to exclude\n   * @return a new string containing the specified part of the given string\n   */\n  substring(indexStart = 0, indexEnd = this.size): string {\n    const start = this.getCharStart(indexStart);\n    // return empty string if no character is found;\n    if (start === -1) return \"\";\n    const end = this.getCharStart(indexEnd, indexStart, start);\n    return (this.constructor as typeof StringView).decode(\n      this,\n      start,\n      end - start + 1,\n    );\n  }\n\n  toChar(index: number): string {\n    // check boundaries\n    if (index < 0 || index > this.byteLength) return \"\";\n    const point = this.getUint8(index);\n    if (point < 0x80) return String.fromCodePoint(point);\n    switch ((point & 0xf0) >> 4) {\n      case 0xf:\n        return String.fromCodePoint(\n          ((point & 0x07) << 18) |\n            ((this.getUint8(index + 1) & 0x3f) << 12) |\n            ((this.getUint8(index + 2) & 0x3f) << 6) |\n            (this.getUint8(index + 3) & 0x3f),\n        );\n      case 0xe:\n        return String.fromCodePoint(\n          ((point & 0x0f) << 12) |\n            ((this.getUint8(index + 1) & 0x3f) << 6) |\n            (this.getUint8(index + 2) & 0x3f),\n        );\n      case 0xd:\n      case 0xc:\n        return String.fromCodePoint(\n          ((point & 0x1f) << 6) | (this.getUint8(index + 1) & 0x3f),\n        );\n      default:\n        return \"\";\n    }\n  }\n\n  /**\n   * Returns a string value of the StringView.\n   */\n  toJSON(): string {\n    return this.get();\n  }\n\n  /**\n   * Returns a string value of the StringView.\n   */\n  toString(): string {\n    return this.get();\n  }\n\n  /**\n   * Returns a StringView without trailing zeros.\n   */\n  trim(): StringView {\n    let end = -1;\n    while (++end < this.byteLength) {\n      if (this.getUint8(end) === 0) break;\n    }\n    return end !== this.byteLength\n      ? new (this.constructor as typeof StringView)(\n        this.buffer,\n        this.byteOffset,\n        end,\n      )\n      : this;\n  }\n\n  swapChar(i: number, j: number): void {\n    const temp = this.getUint8(i);\n    this.setUint8(i, this.getUint8(j));\n    this.setUint8(j, temp);\n  }\n\n  static initialize(): ViewConstructor<string, PrimitiveView<string>> {\n    return this;\n  }\n}\n"]}