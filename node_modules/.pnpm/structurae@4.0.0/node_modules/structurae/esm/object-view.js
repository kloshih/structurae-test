export class ObjectView extends DataView {
    static decode(view, start = 0, _) {
        const layout = this.layout;
        const fields = this.fields;
        const result = new this.ObjectConstructor();
        for (let i = 0; i < fields.length; i++) {
            const name = fields[i];
            const { View, start: fieldStart, length: fieldLength } = layout[name];
            result[name] = View.decode(view, start + fieldStart, fieldLength);
        }
        return result;
    }
    static encode(value, view, start = 0, length = this.viewLength, amend) {
        if (!amend) {
            new Uint8Array(view.buffer, view.byteOffset + start, length).fill(0);
        }
        const layout = this.layout;
        const fields = this.fields;
        for (let i = 0; i < fields.length; i++) {
            const name = fields[i];
            if (Reflect.has(value, name)) {
                const { View, start: fieldStart, length: fieldLength } = layout[name];
                View.encode(value[name], view, start + fieldStart, fieldLength);
            }
        }
        return length;
    }
    static from(value) {
        const objectView = new this(this.defaultData.buffer.slice(0));
        this.encode(value, objectView, 0, this.viewLength, true);
        return objectView;
    }
    static getLength() {
        return this.viewLength;
    }
    get(field) {
        const layout = this.constructor
            .layout;
        const { start, View, length } = layout[field];
        return View.decode(this, start, length);
    }
    getLength(field) {
        const layout = this.constructor
            .layout;
        return layout[field].length;
    }
    getView(field) {
        const layout = this.constructor
            .layout;
        const { View, start, length } = layout[field];
        return new View(this.buffer, this.byteOffset + start, length);
    }
    set(field, value) {
        const layout = this.constructor
            .layout;
        const { start, View, length } = layout[field];
        View.encode(value, this, start, length);
    }
    setView(field, view) {
        const layout = this.constructor
            .layout;
        const { start } = layout[field];
        new Uint8Array(this.buffer, this.byteOffset, this.byteLength).set(new Uint8Array(view.buffer, view.byteOffset, view.byteLength), start);
    }
    toJSON() {
        return this.constructor.decode(this, 0);
    }
    static initialize(schema, Factory, constructor) {
        var _a;
        const { getDefaultConstructor, getDefaultData } = Factory
            .constructor;
        const fields = Object.keys(schema.properties);
        const layout = {};
        let lastOffset = 0;
        for (const property of fields) {
            const field = schema.properties[property];
            const fieldLayout = Factory.getFieldLayout(field, lastOffset, true, property);
            lastOffset += fieldLayout.length;
            layout[property] = fieldLayout;
        }
        const defaultData = getDefaultData(layout, lastOffset, fields);
        const ObjectConstructor = constructor ||
            getDefaultConstructor(fields, layout);
        return _a = class extends this {
            },
            Object.defineProperty(_a, "viewLength", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: lastOffset
            }),
            Object.defineProperty(_a, "layout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: layout
            }),
            Object.defineProperty(_a, "fields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: fields
            }),
            Object.defineProperty(_a, "defaultData", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: defaultData
            }),
            Object.defineProperty(_a, "ObjectConstructor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ObjectConstructor
            }),
            _a;
    }
}
//# sourceMappingURL=object-view.js.map