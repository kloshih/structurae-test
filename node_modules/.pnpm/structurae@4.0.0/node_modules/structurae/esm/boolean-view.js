export class BooleanView extends DataView {
    static decode(view, start = 0) {
        return !!DataView.prototype.getUint8.call(view, start);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setUint8.call(view, start, +value);
        return this.viewLength;
    }
    static from(value) {
        const typeView = new this(new ArrayBuffer(this.viewLength));
        this.encode(value, typeView, 0);
        return typeView;
    }
    static getLength() {
        return this.viewLength;
    }
    get() {
        return this.constructor.decode(this);
    }
    set(value) {
        this.constructor.encode(value, this);
        return this;
    }
    toJSON() {
        return this.constructor.decode(this);
    }
    static initialize() {
        return this;
    }
}
Object.defineProperty(BooleanView, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 1
});
//# sourceMappingURL=boolean-view.js.map