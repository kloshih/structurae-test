{"version":3,"file":"pool.js","sourceRoot":"","sources":["../src/pool.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,OAAO,IAAK,SAAQ,QAAQ;IAAlC;;QACE;;;;mBAAgB,CAAC;WAAC;IAqDpB,CAAC;IAnDC;;;;;OAKG;IACH,MAAM,CAAC,MAAM,CAEX,IAAY;QAEZ,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtB,OAAO,IAAuB,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,IAAI,CAAC,KAAa;QAChB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACH,GAAG;QACD,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,CAAC,aAAa;YAAE,OAAO,CAAC,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;QAErC,kCAAkC;QAClC,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;YACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACjB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;oBACvB,MAAM;iBACP;aACF;SACF;QAED,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;IACtC,CAAC;CACF","sourcesContent":["import { BitArray } from \"./bit-array.js\";\nimport { getLSBIndex } from \"./utilities.js\";\n\n/**\n * Implements a fast algorithm to manage availability of objects in an object pool using a BitArray.\n *\n * @example\n * // create a pool of 1600 indexes\n * const pool = Pool.create(100 * 16);\n *\n * // get the next available index and make it unavailable\n * pool.get();\n * //=> 0\n * pool.get();\n * //=> 1\n *\n * // set index available\n * pool.free(0);\n * pool.get();\n * //=> 0\n *\n * pool.get();\n * //=> 2\n */\nexport class Pool extends BitArray {\n  nextAvailable = 0;\n\n  /**\n   * Creates a Pool of the specified size.\n   *\n   * @param size the size of the pool\n   * @return a new Pool\n   */\n  static create<T extends typeof BitArray>(\n    this: T,\n    size: number,\n  ): InstanceType<T> {\n    const pool = new this(this.getLength(size));\n    pool.fill(4294967295);\n    return pool as InstanceType<T>;\n  }\n\n  /**\n   * Makes a given index available.\n   *\n   * @param index index to be freed\n   */\n  free(index: number): void {\n    const { bucket, position } = this.getBitPosition(index);\n    this[bucket] |= 1 << position;\n    this.nextAvailable = bucket;\n  }\n\n  /**\n   * Gets the next available index in the pool.\n   *\n   * @return the next available index\n   */\n  get(): number {\n    const { nextAvailable } = this;\n    if (!~nextAvailable) return -1;\n    const record = this[nextAvailable];\n    const index = getLSBIndex(record);\n    this[nextAvailable] &= ~(1 << index);\n\n    // record is full, find next empty\n    if (this[nextAvailable] === 0) {\n      this.nextAvailable = -1;\n      for (let i = 0; i < this.length; i++) {\n        if (this[i] !== 0) {\n          this.nextAvailable = i;\n          break;\n        }\n      }\n    }\n\n    return (nextAvailable << 5) + index;\n  }\n}\n"]}