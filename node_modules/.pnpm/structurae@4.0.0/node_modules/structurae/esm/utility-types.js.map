{"version":3,"file":"utility-types.js","sourceRoot":"","sources":["../src/utility-types.ts"],"names":[],"mappings":"","sourcesContent":["// deno-lint-ignore no-explicit-any\nexport type Constructor<T = unknown> = new (...args: any[]) => T;\n\nexport type Bit = 0 | 1;\n\nexport interface IndexedCollection<T = number> {\n  length: number;\n  [n: number]: T;\n}\n\nexport type TypedArrayConstructors =\n  | Constructor<Int8Array>\n  | Constructor<Uint8Array>\n  | Constructor<Uint8ClampedArray>\n  | Constructor<Int16Array>\n  | Constructor<Uint16Array>\n  | Constructor<Int32Array>\n  | Constructor<Uint32Array>\n  | Constructor<Float32Array>\n  | Constructor<Float64Array>;\n\nexport interface AdjacencyStructure extends IndexedCollection {\n  empty: unknown;\n  /**\n   * The number of vertices.\n   */\n  vertices: number;\n  /**\n   * The maximum number of edges.\n   */\n  edges: number;\n  /**\n   * Adds an edge between two vertices.\n   *\n   * @param x the starting vertex\n   * @param y the ending vertex\n   * @param weight the weight\n   * @return the structure\n   */\n  addEdge(x: number, y: number, weight?: number): this;\n  /**\n   * Returns the weight of the edge between given vertices\n   * or NaN if the edge doesn't exist.\n   *\n   * @param x the starting vertex\n   * @param y the ending vertex\n   * @returns the edge\n   */\n  getEdge(x: number, y: number): number;\n  /**\n   * Checks if there is an edge between two vertices.\n   *\n   * @param x the starting vertex\n   * @param y the ending vertex\n   */\n  hasEdge(x: number, y: number): boolean;\n  /**\n   * Iterates over incoming edges of a vertex.\n   *\n   * @param vertex the vertex\n   */\n  inEdges(x: number): Generator<number, void, unknown>;\n  /**\n   * Check if all available edges are set.\n   */\n  isFull(): boolean;\n  /**\n   * Iterates over outgoing edges of a vertex.\n   *\n   * @param vertex the vertex\n   */\n  outEdges(x: number): Generator<number, void, unknown>;\n  /**\n   * Removes an edge between two vertices.\n   *\n   * @param x the starting vertex\n   * @param y the ending vertex\n   * @return the structure\n   */\n  removeEdge(x: number, y: number): this;\n}\n\nexport type AdjacencyStructureConstructor<\n  U extends TypedArrayConstructors,\n> = {\n  directed: boolean;\n  weighted: boolean;\n  get [Symbol.species](): U;\n  // deno-lint-ignore no-explicit-any\n  new (...args: any[]): AdjacencyStructure;\n  /**\n   * Create an adjacency structure of specified dimensions.\n   *\n   * @param vertices the number of vertices\n   * @param edges the maximum amount of edges\n   * @return a new adjacency structure of specified dimentions\n   */\n  create<T extends AdjacencyStructureConstructor<U>>(\n    this: T,\n    vertices: number,\n    edges?: number,\n  ): InstanceType<T>;\n  /**\n   * Returns the length of underlying TypedArray required to hold a structure\n   * of the specified dimensions.\n   *\n   * @param vertices the number of vertices\n   * @param edges the maximum amount of edges\n   * @return the length\n   */\n  getLength(vertices: number, edges?: number): number;\n} & U;\n"]}