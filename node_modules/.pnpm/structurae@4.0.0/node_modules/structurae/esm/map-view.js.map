{"version":3,"file":"map-view.js","sourceRoot":"","sources":["../src/map-view.ts"],"names":[],"mappings":"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","sourcesContent":["// deno-lint-ignore-file ban-types\nimport type { Constructor } from \"./utility-types.js\";\nimport type { View } from \"./view.js\";\nimport type {\n  ComplexView,\n  ViewConstructor,\n  ViewInstance,\n  ViewLayout,\n  ViewSchema,\n} from \"./view-types.js\";\n\nexport class MapView<T extends object> extends DataView\n  implements ComplexView<T> {\n  static viewLength = 0;\n  static layout: ViewLayout<unknown>;\n  static lengthOffset: number;\n  static optionalOffset: number;\n  static fields: Array<unknown>;\n  static optionalFields: Array<unknown>;\n  static maxView: DataView;\n  static defaultData?: Uint8Array;\n  static ObjectConstructor: Constructor<unknown>;\n\n  static decode<T>(view: DataView, start = 0): T {\n    const fields = this.fields as Array<keyof T>;\n    const layout = this.layout as ViewLayout<T>;\n    const optionalFields = this.optionalFields as Array<keyof T>;\n    const object = new this.ObjectConstructor() as T;\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      const { View, start: startOffset, length } = layout[field];\n      object[field] = View.decode(view, start + startOffset, length);\n    }\n    for (let i = 0; i < optionalFields.length; i++) {\n      const field = optionalFields[i];\n      const { View, start: startOffset } = layout[field];\n      const fieldStart = view.getUint32(start + startOffset, true);\n      const end = view.getUint32(start + startOffset + 4, true);\n      if (fieldStart === end) continue;\n      object[field] = View.decode(view, start + fieldStart, end - fieldStart);\n    }\n    return object;\n  }\n\n  static encode<T>(\n    value: T,\n    view: DataView,\n    start = 0,\n    length?: number,\n    amend?: boolean,\n  ) {\n    const fields = this.fields as Array<keyof T>;\n    const layout = this.layout as ViewLayout<T>;\n    const optionalFields = this.optionalFields as Array<keyof T>;\n    // zero-out required part if encode is called internally providing length\n    if (!amend) {\n      new Uint8Array(\n        view.buffer,\n        view.byteOffset + start,\n        this.optionalOffset,\n      ).fill(0);\n    }\n    for (const field of fields) {\n      const fieldValue = value[field];\n      if (fieldValue != null) {\n        const { View, length: maxLength, start: fieldStart } = layout[field];\n        View.encode(fieldValue, view, start + fieldStart, maxLength);\n      }\n    }\n    let end = this.lengthOffset + 4;\n    let availableSpace = (length ?? view.byteLength) - end;\n    for (const field of optionalFields) {\n      const fieldValue = value[field];\n      const { View, length: maxLayoutLength, start: fieldStart } = layout[\n        field\n      ];\n      view.setUint32(start + fieldStart, end, true);\n      let fieldLength = 0;\n      if (fieldValue != null) {\n        const caret = start + end;\n        if (View.viewLength || View.itemLength) {\n          fieldLength = View.getLength(\n            (fieldValue as unknown as Array<unknown>).length || 1,\n          );\n          if (fieldLength > availableSpace) continue;\n          View.encode(fieldValue, view, caret, fieldLength);\n        } else {\n          // support setting max length for optional strings\n          const maxLength = length\n            ? Math.min(availableSpace, maxLayoutLength)\n            : maxLayoutLength !== Infinity\n            ? maxLayoutLength\n            : undefined;\n          fieldLength = View.encode(fieldValue, view, caret, maxLength);\n        }\n        end += fieldLength;\n        availableSpace -= fieldLength;\n      }\n    }\n    view.setUint32(start + this.lengthOffset, end, true);\n    return end;\n  }\n\n  static from<T extends object, U extends MapView<T>>(value: T): U {\n    const { maxView, defaultData } = this;\n    const mapArray = new Uint8Array(maxView.buffer, maxView.byteOffset);\n    if (defaultData) {\n      mapArray.set(defaultData);\n    }\n    const end = this.encode<T>(value, maxView, 0, undefined, true);\n    return new this<T>(maxView.buffer.slice(0, end)) as U;\n  }\n\n  static getLength<T>(value: T): number {\n    const layout = this.layout as ViewLayout<T>;\n    const optionalFields = this.optionalFields as Array<keyof T>;\n    let length = this.lengthOffset + 4;\n    for (let i = 0; i < optionalFields.length; i++) {\n      const field = optionalFields[i];\n      const fieldValue = value[field];\n      if (fieldValue == null) continue;\n      let fieldLength = 0;\n      const { View, length: maxLength } = layout[field];\n      if (View.viewLength) {\n        fieldLength = View.viewLength;\n      } else if (View.itemLength) {\n        fieldLength = View.getLength(\n          ((fieldValue as unknown) as Array<unknown>).length,\n        );\n      } else {\n        fieldLength = View.getLength((fieldValue as unknown) as number);\n      }\n      length += Math.min(fieldLength, maxLength);\n    }\n    return length;\n  }\n\n  get<P extends keyof T>(field: P): T[P] | undefined {\n    const layout = this.getLayout(field);\n    if (!layout) return undefined;\n    const [View, start, length] = layout;\n    return View.decode(this, start, length);\n  }\n\n  getLength<P extends keyof T>(field: P): number {\n    const layout = this.getLayout(field);\n    if (!layout) return 0;\n    return layout[2];\n  }\n\n  getLayout<P extends keyof T>(\n    field: P,\n  ): [ViewConstructor<T[P]>, number, number] | undefined {\n    const layout = (this.constructor as typeof MapView).layout as ViewLayout<T>;\n    const definition = layout[field];\n    if (!definition) return undefined;\n    const { View, start, required, length } = definition;\n    if (required) {\n      return [View, start, length];\n    }\n    const startOffset = this.getUint32(start, true);\n    const end = this.getUint32(start + 4, true);\n    if (startOffset === end) return undefined;\n    return [View, startOffset, end - startOffset];\n  }\n\n  getView<P extends keyof T>(field: P): ViewInstance<T[P]> | undefined {\n    const layout = this.getLayout(field);\n    if (!layout) return undefined;\n    const [View, start, length] = layout;\n    return new View(this.buffer, start, length);\n  }\n\n  set<P extends keyof T>(field: P, value: T[P]) {\n    const layout = this.getLayout(field);\n    if (!layout) return undefined;\n    const [View, start, length] = layout;\n    View.encode(value, this, this.byteOffset + start, length);\n    return undefined;\n  }\n\n  setView<P extends keyof T>(field: P, view: DataView) {\n    const layout = this.getLayout(field);\n    if (!layout) return undefined;\n    new Uint8Array(this.buffer, this.byteOffset, this.byteLength).set(\n      new Uint8Array(view.buffer, view.byteOffset, view.byteLength),\n      layout[1],\n    );\n    return undefined;\n  }\n\n  toJSON(): T {\n    return (this.constructor as typeof MapView).decode<T>(this);\n  }\n\n  static initialize<T extends object>(\n    schema: ViewSchema<T>,\n    Factory: View,\n    constructor: Constructor<T>,\n  ): ViewConstructor<T, ComplexView<T>> {\n    const { getDefaultConstructor, getDefaultData } = Factory\n      .constructor as typeof View;\n    const required: Array<keyof T> = schema.required || [];\n    const optional = (Object.keys(schema.properties!) as Array<keyof T>).filter(\n      (i) => !required.includes(i),\n    );\n    const layout = {} as ViewLayout<T>;\n    let offset = 0;\n    for (const property of required) {\n      const field = schema.properties![property];\n      const fieldLayout = Factory.getFieldLayout(\n        field,\n        offset,\n        true,\n        property as string,\n      );\n      offset += fieldLayout.length;\n      layout[property] = fieldLayout;\n    }\n    const optionalOffset = offset;\n    for (let i = 0; i < optional.length; i++) {\n      const property = optional[i];\n      const field = schema.properties![property];\n      layout[property as keyof T] = Factory.getFieldLayout(\n        field,\n        offset + (i << 2),\n        false,\n        property as string,\n      );\n    }\n    const defaultData = getDefaultData(\n      layout,\n      optionalOffset,\n      required as Array<keyof T>,\n    );\n    const ObjectConstructor = constructor ||\n      getDefaultConstructor(required as Array<keyof T>, layout);\n    return class extends this<T> {\n      static layout = layout;\n      static lengthOffset = optionalOffset + (optional.length << 2);\n      static optionalOffset = optionalOffset;\n      static fields = required;\n      static optionalFields = optional;\n      static maxView = Factory.maxView;\n      static defaultData = defaultData;\n      static ObjectConstructor = ObjectConstructor;\n    };\n  }\n}\n"]}