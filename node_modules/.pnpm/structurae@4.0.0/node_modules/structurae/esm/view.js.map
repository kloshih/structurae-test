{"version":3,"file":"view.js","sourceRoot":"","sources":["../src/view.ts"],"names":[],"mappings":"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","sourcesContent":["// deno-lint-ignore-file ban-types\nimport type {\n  UnknownViewConstructor,\n  ViewConstructor,\n  ViewFieldLayout,\n  ViewInstance,\n  ViewLayout,\n  ViewSchema,\n} from \"./view-types.js\";\nimport { BooleanView } from \"./boolean-view.js\";\nimport {\n  BigInt64View,\n  BigUint64View,\n  Float32View,\n  Float64View,\n  Int16View,\n  Int32View,\n  Int8View,\n  Uint16View,\n  Uint32View,\n  Uint8View,\n} from \"./numeric-view.js\";\nimport { ObjectView } from \"./object-view.js\";\nimport { ArrayView } from \"./array-view.js\";\nimport { VectorView } from \"./vector-view.js\";\nimport { MapView } from \"./map-view.js\";\nimport { DictView } from \"./dict-view.js\";\nimport { StringView } from \"./string-view.js\";\nimport { TypedArrayView } from \"./typed-array-view.js\";\nimport { BinaryView } from \"./binary-view.js\";\nimport { log2 } from \"./utilities.js\";\nimport type { Constructor } from \"./utility-types.js\";\n\nexport class View {\n  Views = new Map<string, UnknownViewConstructor>([\n    [\"array\", ArrayView],\n    [\"typedarray\", TypedArrayView],\n    [\"vector\", VectorView],\n    [\"object\", ObjectView as unknown as UnknownViewConstructor],\n    [\"map\", MapView as UnknownViewConstructor],\n    [\"dict\", DictView as UnknownViewConstructor],\n    [\"int8\", Int8View],\n    [\"uint8\", Uint8View],\n    [\"int16\", Int16View],\n    [\"uint16\", Uint16View],\n    [\"int32\", Int32View],\n    [\"number\", Float64View],\n    [\"integer\", Int32View],\n    [\"uint32\", Uint32View],\n    [\"float32\", Float32View],\n    [\"float64\", Float64View],\n    [\"bigint64\", BigInt64View],\n    [\"biguint64\", BigUint64View],\n    [\"boolean\", BooleanView],\n    [\"string\", StringView],\n    [\"binary\", BinaryView],\n  ]);\n  TaggedViews = new Map<number, UnknownViewConstructor>();\n  static AbstractViews = new Set([\n    \"object\",\n    \"array\",\n    \"typedarray\",\n    \"vector\",\n    \"map\",\n    \"dict\",\n  ]);\n\n  constructor(public maxView = new DataView(new ArrayBuffer(8192))) {\n  }\n\n  create<T>(\n    schema: ViewSchema<T>,\n    constructor?: T extends object ? Constructor<T> : never,\n  ): ViewConstructor<T> {\n    const { getSchemaId, getSchemaOrdering } = this\n      .constructor as typeof View;\n    const schemas = getSchemaOrdering(schema as ViewSchema<unknown>);\n    for (let i = schemas.length - 1; i >= 0; i--) {\n      const objectSchema = schemas[i];\n      const id = getSchemaId(objectSchema);\n      if (this.Views.has(id)) continue;\n      // use provided constructor for top object\n      const objectCtor = objectSchema === schema ? constructor : undefined;\n      const View = objectSchema.btype === \"map\"\n        ? this.Views.get(\"map\")!.initialize(objectSchema, this, objectCtor)\n        : objectSchema.btype === \"dict\"\n        ? this.Views.get(\"dict\")!.initialize(objectSchema, this)\n        : this.Views.get(\"object\")!.initialize(objectSchema, this, objectCtor);\n      // cache the view by id\n      this.Views.set(id, View);\n      // cache by tag if present\n      const tag = this.getSchemaTag(objectSchema);\n      if (tag) this.TaggedViews.set(tag, View);\n    }\n    if (schema.type === \"array\") return this.getArray<T>(schema)[0];\n    return this.getExistingView<T>(schema);\n  }\n\n  view<T>(view: DataView): ViewInstance<T> | undefined {\n    const tag = this.getTag(view);\n    const ViewClass = this.TaggedViews.get(tag);\n    if (!ViewClass) return undefined;\n    return new (ViewClass as ViewConstructor<T>)(view.buffer, view.byteOffset);\n  }\n\n  decode<T>(view: DataView): T | undefined {\n    const tag = this.getTag(view);\n    const ViewClass = this.TaggedViews.get(tag);\n    if (!ViewClass) return undefined;\n    return (ViewClass as ViewConstructor<T>).decode(view, 0);\n  }\n\n  encode<T extends { tag: number }>(\n    value: T,\n    view?: DataView,\n    offset = 0,\n  ): ViewInstance<T> | undefined {\n    const ViewClass = this.TaggedViews.get(value.tag) as ViewConstructor<T>;\n    if (!ViewClass) return undefined;\n    if (!view) return ViewClass.from(value);\n    ViewClass.encode(value, view, offset);\n    return new ViewClass(view.buffer, view.byteOffset);\n  }\n\n  getTag(view: DataView): number {\n    return view.getUint8(0);\n  }\n\n  getSchemaTag(\n    schema: ViewSchema<object>,\n  ): number | undefined {\n    const tag = (schema.properties as { tag: ViewSchema<unknown> })?.tag\n      ?.default;\n    return typeof tag === \"number\" ? tag : undefined;\n  }\n\n  getArray<T>(\n    schema: ViewSchema<T>,\n  ): [view: ViewConstructor<T>, length: number] {\n    const { getSchemaId } = this.constructor as typeof View;\n    const arrays: Array<ViewSchema<Array<unknown>>> = [];\n    let currentField = schema as ViewSchema<unknown>;\n    // go down the array(s) to the item field\n    while (currentField && currentField.type === \"array\") {\n      arrays.push(currentField as ViewSchema<Array<unknown>>);\n      currentField = currentField.items!;\n    }\n    let currentArray = arrays.pop()!;\n    // get existing view of the item\n    const itemView = this.getExistingView(currentField);\n    // check\n    const itemId = getSchemaId(currentField as ViewSchema<unknown>);\n    const isArray = currentArray.btype !== \"vector\";\n    const viewId = isArray ? `ArrayView_${itemId}` : `VectorView_${itemId}`;\n    let CurrentView: UnknownViewConstructor;\n    if (!this.Views.has(viewId)) {\n      CurrentView = isArray\n        ? this.getArrayView(\n          currentField,\n          itemView,\n          currentField.maxLength,\n        )\n        : this.Views.get(\"vector\")!.initialize(\n          currentField,\n          this,\n          itemView,\n        );\n      // cache array views of unspecified length\n      if (currentField.maxLength === undefined) {\n        this.Views.set(viewId, CurrentView);\n      }\n    } else {\n      CurrentView = this.Views.get(viewId)!;\n    }\n    // initialize nested arrays\n    let itemLength = isArray ? CurrentView.getLength(currentArray.maxItems) : 0;\n    for (let i = arrays.length - 1; i >= 0; i--) {\n      currentArray = arrays[i];\n      if (currentArray.btype !== \"vector\") {\n        CurrentView = this.getArrayView(\n          currentArray.items as ViewSchema<unknown>,\n          CurrentView as ViewConstructor<unknown>,\n          itemLength,\n        );\n        itemLength = CurrentView.getLength(currentArray.maxItems);\n      } else {\n        CurrentView = this.Views.get(\"vector\")!.initialize(\n          currentArray.items,\n          this,\n          CurrentView,\n        );\n      }\n    }\n    return [(CurrentView as unknown) as ViewConstructor<T>, itemLength];\n  }\n\n  getArrayView<T>(\n    schema: ViewSchema<T>,\n    SchemaView?: ViewConstructor<T>,\n    length?: number,\n  ): ViewConstructor<Array<T>> {\n    const itemLength = length || SchemaView?.viewLength;\n    const isTypedArray = Reflect.has(log2, itemLength!);\n    return this.Views.get(isTypedArray ? \"typedarray\" : \"array\")!\n      .initialize(schema, this, SchemaView, itemLength) as ViewConstructor<\n        Array<T>\n      >;\n  }\n\n  static getDefaultData<T extends unknown>(\n    layout: ViewLayout<T>,\n    viewLength: number,\n    fields: Array<keyof T>,\n  ): Uint8Array {\n    const buffer = new ArrayBuffer(viewLength);\n    const view = new DataView(buffer);\n    const array = new Uint8Array(buffer);\n    for (const name of fields) {\n      const field = layout[name];\n      if (Reflect.has(field, \"default\")) {\n        field.View.encode(field.default!, view, field.start, field.length);\n      } else if (field.View.defaultData) {\n        array.set(field.View.defaultData, field.start);\n      }\n    }\n    return array;\n  }\n\n  static getDefaultConstructor<T>(\n    fields: Array<keyof T>,\n    layout: ViewLayout<T>,\n  ): Constructor<T> {\n    const content: Array<string> = [];\n    for (const field of fields) {\n      const View: ViewConstructor<unknown, unknown> = layout[field].View;\n      let value = \"\";\n      switch (View) {\n        case Int8View:\n        case Int16View:\n        case Uint16View:\n        case Uint8View:\n        case Int32View:\n          value = \"0\";\n          break;\n        case Float32View:\n        case Float64View:\n          value = \"0.0\";\n          break;\n        case BigInt64View:\n        case BigUint64View:\n          value = \"0n\";\n          break;\n        case BooleanView:\n          value = \"false\";\n          break;\n        case StringView:\n          value = \"''\";\n          break;\n        default:\n          value = \"null\";\n      }\n      content.push(`${field}:${value}`);\n    }\n    return new Function(\n      \"return {\" + content.join(\",\") +\n        \"}\",\n    ) as Constructor<T>;\n  }\n\n  getExistingView<T>(schema: ViewSchema<T>): ViewConstructor<T> {\n    const { AbstractViews } = this.constructor as typeof View;\n    let type = schema.$id || schema.$ref?.slice(1);\n    if (type) {\n      if (!this.Views.has(type)) throw Error(`View \"${type}\" is not found.`);\n    } else {\n      type = schema.btype || schema.type;\n      if (!this.Views.has(type)) {\n        throw TypeError(`Type \"${type}\" is not supported.`);\n      } else if (AbstractViews.has(type)) {\n        throw TypeError(`Type ${type} is abstract.`);\n      }\n    }\n    return this.Views.get(type) as ViewConstructor<T>;\n  }\n\n  getFieldLayout<T>(\n    field: ViewSchema<T>,\n    start: number,\n    required: boolean,\n    name: string,\n  ): ViewFieldLayout<T> {\n    let View: ViewConstructor<T>;\n    let length = 0;\n    if (field.type !== \"array\") {\n      View = this.getExistingView(field);\n      length = field.maxLength || View.viewLength;\n    } else {\n      [View, length] = this.getArray(field);\n    }\n    if (!length) length = Infinity;\n    if (required && length === Infinity) {\n      throw new TypeError(\n        `The length of a required field \"${name}\" is undefined.`,\n      );\n    }\n    const layout: ViewFieldLayout<T> = { start, View, length, required };\n    if (Reflect.has(field, \"default\")) {\n      layout.default = (field.default as unknown) as T;\n    }\n    return layout;\n  }\n\n  // deno-lint-ignore no-explicit-any\n  static getSchemaId(schema: ViewSchema<any>): string {\n    return schema.$id || schema.$ref?.slice(1) || schema.btype || schema.type;\n  }\n\n  static getSchemaOrdering(\n    schema: ViewSchema<unknown>,\n  ): Array<ViewSchema<object>> {\n    // create graph\n    let object = schema;\n    // reach the nested object if an array is provided\n    while (object.type === \"array\") object = object.items!;\n    // return if no object found\n    if (object.type !== \"object\") return [];\n    const mainId = object.$id!;\n    let id = mainId;\n    const objects = { [id]: object };\n    const adjacency: Record<string, Array<string>> = { [id]: [] };\n    const indegrees = { [id]: 0 };\n    const processing = [id];\n    while (processing.length) {\n      id = processing.pop()!;\n      object = objects[id];\n      if (!object.properties) continue;\n      const properties = Object.keys(object.properties);\n      for (const property of properties) {\n        let field =\n          (object.properties! as Record<string, ViewSchema<unknown>>)[property];\n        if (field.type === \"array\") {\n          while (field.type === \"array\") field = field.items!;\n        }\n        const { $id, $ref } = field;\n        if ($id) {\n          objects[$id] = field;\n          adjacency[id].push($id);\n          adjacency[$id] = [];\n          indegrees[$id] = indegrees[$id] ? indegrees[$id] + 1 : 1;\n          processing.push($id);\n        } else if ($ref) {\n          const refId = $ref.slice(1);\n          indegrees[refId] = indegrees[refId] ? indegrees[refId] + 1 : 1;\n          adjacency[id].push(refId);\n        }\n      }\n    }\n\n    // topologically sort the graph\n    let visited = 0;\n    const order: Array<ViewSchema<object>> = [];\n    processing.push(mainId);\n    while (processing.length) {\n      id = processing.shift()!;\n      const children = adjacency[id];\n      if (!children) continue; // $ref no external links\n      order.push(objects[id] as ViewSchema<object>);\n      for (const child of children) {\n        indegrees[child] -= 1;\n        if (indegrees[child] === 0) processing.push(child);\n      }\n      visited++;\n    }\n    // check for recursive links\n    if (visited !== Object.keys(objects).length) {\n      throw TypeError(\"The schema has recursive references.\");\n    }\n    return order;\n  }\n}\n"]}