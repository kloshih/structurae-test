{"version":3,"file":"sorted-array.js","sourceRoot":"","sources":["../src/sorted-array.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IndexedCollection } from \"./utility-types.js\";\n\nexport type Comparator<T> = (a: T, b: T) => -1 | 0 | 1;\n\n/**\n * Extends Array to handle sorted data.\n */\nexport class SortedArray<ItemType> extends Array<ItemType> {\n  unique = false;\n\n  /**\n   * The default comparator.\n   *\n   * @param a the first value\n   * @param b the second value\n   * @throws RangeError if the comparison is unstable\n   */\n  static compare<T>(a: T, b: T): -1 | 0 | 1 {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    if (a === b) return 0;\n    throw new RangeError(\"Unstable comparison.\");\n  }\n\n  /**\n   * Creates a new SortedArray from a given array-like object.\n   */\n  static from<T>(iterable: Iterable<T> | ArrayLike<T>): SortedArray<T>;\n\n  static from<T, U>(\n    iterable: Iterable<T> | ArrayLike<T>,\n    mapfn?: (v: T, k: number) => U,\n    thisArg?: unknown,\n  ): SortedArray<U> {\n    const result =\n      (mapfn !== undefined\n        ? super.from(iterable, mapfn, thisArg)\n        : super.from(iterable)) as SortedArray<U>;\n    result.sort();\n    return result;\n  }\n\n  /**\n   * Returns the difference of two sorted arrays,\n   * i.e. elements present in the first array but not in the second array.\n   * If `symmetric=true` finds the symmetric difference of two arrays, that is,\n   * the elements that are absent in one or another array.\n   *\n   * @param a the first array\n   * @param b the second array\n   * @param [symmetric=false] whether to get symmetric difference.\n   * @param [comparator] the comparator static used to sort the arrays\n   * @param [container] an array-like object to hold the results\n   * @return the difference of the arrays\n   * @example\n   *\n   * SortedArray.getDifference([1, 2, 3, 4, 8], [2, 4, 6, 7, 9]);\n   * //=> [ 1, 3, 8 ]\n   *\n   * // symmetric difference of sorted arrays:\n   * SortedArray.getDifference(first, second, true);\n   * //=> [ 1, 3, 6, 7, 8, 9 ]\n\n   * // difference using a custom comparator:\n   * const customComparator = (a, b) => (a > b ? -1 : a < b ? 1 : 0);\n   * SortedArray.getDifference([8, 4, 3, 2, 1], [9, 7, 6, 4, 2], false, customComparator);\n   * //=> [ 8, 3, 1 ]\n   */\n  static getDifference<T, U extends IndexedCollection<T>>(\n    a: U,\n    b: U,\n    symmetric = false,\n    comparator: Comparator<T> = this.compare,\n    container: U = ([] as unknown) as U,\n  ): typeof container {\n    let i = 0;\n    let j = 0;\n    while (i < a.length && j < b.length) {\n      const compared = comparator(a[i], b[j]);\n      if (compared > 0) {\n        if (symmetric) container[container.length] = b[j];\n        j++;\n      } else if (compared < 0) {\n        container[container.length] = a[i];\n        i++;\n      } else {\n        i++;\n        j++;\n      }\n    }\n    while (i < a.length) {\n      container[container.length] = a[i];\n      i++;\n    }\n    if (symmetric) {\n      while (j < b.length) {\n        container[container.length] = b[j];\n        j++;\n      }\n    }\n    return container;\n  }\n\n  /**\n   * Returns the amount of differing elements in the first array.\n   *\n   * @param a the first array\n   * @param b the second array\n   * @param [symmetric=false] whether to use symmetric difference\n   * @param [comparator] the comparator static used to sort the arrays\n   * @return the amount of differing elements\n   * @example\n   *\n   * SortedArray.getDifferenceScore([1, 2, 3, 4, 8], [2, 4, 6, 7, 9]);\n   * //=> 3\n   */\n  static getDifferenceScore<T, U extends IndexedCollection<T>>(\n    a: U,\n    b: U,\n    symmetric = false,\n    comparator = this.compare,\n  ): number {\n    const score = this.getIntersectionScore(a, b, comparator);\n    return symmetric ? a.length + b.length - 2 * score : a.length - score;\n  }\n\n  /**\n   * Uses binary search to find the index of an element inside a sorted array.\n   *\n   * @param arr the array to search\n   * @param target the target value to search for\n   * @param [comparator] a custom comparator\n   * @param [rank=false] whether to return the element's rank if the element isn't found\n   * @param [start] the start position of the search\n   * @param [end] the end position of the search\n   * @return the index of the searched element or it's rank\n   * @example\n   *\n   * SortedArray.getIndex([1, 2, 3, 4, 8], 4);\n   * //=> 3\n   */\n  static getIndex<T, U extends IndexedCollection<T>>(\n    arr: U,\n    target: T,\n    comparator: Comparator<T> = this.compare,\n    rank = false,\n    start = 0,\n    end = arr.length - 1,\n  ): number {\n    let left = start;\n    let right = end;\n    let m;\n    while (left <= right) {\n      m = (left + right) >> 1;\n      const compared = comparator(arr[m], target);\n      if (compared < 0) {\n        left = m + 1;\n      } else if (compared > 0) {\n        right = m - 1;\n      } else {\n        return m;\n      }\n    }\n    return rank ? left : -1;\n  }\n\n  /**\n   * Returns the intersection of two sorted arrays.\n   *\n   * @param a the first array\n   * @param b the second array\n   * @param [comparator] the comparator static used to sort the arrays\n   * @param [container] an array-like object to hold the results\n   * @return the intersection of the arrays\n   * @example\n   *\n   * SortedArray.getIntersection([1, 2, 3, 4, 8], [2, 4, 6, 7, 9]);\n   * //=> [ 2, 4 ]\n   *\n   * // intersection using a custom comparator:\n   * const customComparator = (a, b) => (a > b ? -1 : a < b ? 1 : 0);\n   * SortedArray.getIntersection([8, 4, 3, 2, 1], [9, 7, 6, 4, 2], customComparator);\n   * //=> [ 4, 2 ]\n   */\n  static getIntersection<T, U extends IndexedCollection<T>>(\n    a: U,\n    b: U,\n    comparator: Comparator<T> = this.compare,\n    container: U = ([] as unknown) as U,\n  ): U {\n    let i = 0;\n    let j = 0;\n    while (i < a.length && j < b.length) {\n      const compared = comparator(a[i], b[j]);\n      if (compared > 0) {\n        j++;\n      } else if (compared < 0) {\n        i++;\n      } else {\n        container[container.length] = a[i];\n        i++;\n        j++;\n      }\n    }\n    return container;\n  }\n\n  /**\n   * Returns the amount of common elements in two sorted arrays.\n   *\n   * @param a the first array\n   * @param b the second array\n   * @param [comparator] the comparator static used to sort the arrays\n   * @return the amount of different elements\n   * @example\n   *\n   * SortedArray.getIntersection([1, 2, 3, 4, 8], [2, 4, 6, 7, 9]);\n   * //=> 2\n   */\n  static getIntersectionScore<T, U extends IndexedCollection<T>>(\n    a: U,\n    b: U,\n    comparator: Comparator<T> = this.compare,\n  ): number {\n    let score = 0;\n    let i = 0;\n    let j = 0;\n    while (i < a.length && j < b.length) {\n      const compared = comparator(a[i], b[j]);\n      if (compared > 0) {\n        j++;\n      } else if (compared < 0) {\n        i++;\n      } else {\n        score++;\n        i++;\n        j++;\n      }\n    }\n    return score;\n  }\n\n  /**\n   * Returns a range of elements of a sorted array from the start through the end inclusively.\n   *\n   * @param arr the array\n   * @param [start] the starting item\n   * @param [end] the ending item\n   * @param [comparator] a custom comparator\n   * @param [subarray] return a subarray instead of copying resulting value with slice\n   * @return the range of items\n   * @example\n   *\n   * SortedArray.getRange([1, 2, 3, 4, 8], 2, 4);\n   * //=> [ 2, 3, 4 ]\n   *\n   * const customComparator = (a, b) => (a > b ? -1 : a < b ? 1 : 0);\n   * SortedArray.getRange([8, 4, 3, 2, 1], 8, 3, customComparator);\n   * //=> [ 8, 4, 3 ]\n   */\n  static getRange<T, U extends IndexedCollection<T>>(\n    arr: U,\n    start?: T,\n    end?: T,\n    comparator?: Comparator<T>,\n    subarray?: boolean,\n  ): U {\n    const startIndex = start === undefined\n      ? 0\n      : this.getIndex<T, U>(arr, start, comparator, true);\n    const endIndex = end === undefined\n      ? arr.length\n      : this.getIndex(arr, end, comparator, true, startIndex) + 1;\n    return subarray\n      ? (arr as unknown as Int32Array).subarray(startIndex, endIndex)\n      : // deno-lint-ignore no-explicit-any\n        (arr as any).slice(startIndex, endIndex);\n  }\n\n  /**\n   * Returns the union of two sorted arrays as a sorted array.\n   *\n   * @param a the first array\n   * @param b the second array\n   * @param [unique=false] whether to avoid duplicating items when merging unique arrays\n   * @param [comparator] the comparator static used to sort the arrays\n   * @param [container] an array-like object to hold the results\n   * @return the union of the arrays\n   * @example\n   *\n   * SortedArray.getUnion([1, 2, 3, 4, 8], [2, 4, 6, 7, 9]);\n   * //=> [ 1, 2, 2, 3, 4, 4, 6, 7, 8, 9 ]\n   *\n   * // union of sorted arrays without duplicates:\n   * SortedArray.getUnion([1, 2, 3, 4, 8], [2, 4, 6, 7, 9], true);\n   * //=> [ 1, 2, 3, 4, 6, 7, 8, 9 ]\n   *\n   * //union using a custom comparator:\n   * SortedArray.getUnion([8, 4, 3, 2, 1], [9, 7, 6, 4, 2], true, customComparator);\n   * //=> [ 9, 8, 7, 6, 4, 3, 2, 1 ]\n   */\n  static getUnion<T, U extends IndexedCollection<T>>(\n    a: IndexedCollection<T>,\n    b: IndexedCollection<T>,\n    unique = false,\n    comparator: Comparator<T> = this.compare,\n    container: U = ([] as unknown) as U,\n  ): U {\n    let i = 0;\n    let j = 0;\n    while (i < a.length && j < b.length) {\n      const compared = comparator(a[i], b[j]);\n      if (compared > 0) {\n        container[container.length] = b[j];\n        j++;\n      } else if (compared < 0) {\n        container[container.length] = a[i];\n        i++;\n      } else {\n        container[container.length] = a[i];\n        if (!unique) container[container.length] = b[j];\n        i++;\n        j++;\n      }\n    }\n    while (i < a.length) {\n      container[container.length] = a[i];\n      i++;\n    }\n    while (j < b.length) {\n      container[container.length] = b[j];\n      j++;\n    }\n    return container;\n  }\n\n  /**\n   * Returns an array of unique elements from a sorted array.\n   *\n   * @param arr the sorted array\n   * @param [comparator] a custom comparator\n   * @param [container] an array-like object to hold the results\n   * @return the sorted array without duplicates\n   * @example\n   *\n   * SortedArray.getUnique([1, 1, 2, 2, 3, 4]);\n   * //=> [ 1, 2, 3, 4 ]\n   */\n  static getUnique<T, U extends IndexedCollection<T>>(\n    arr: IndexedCollection<T>,\n    comparator: Comparator<T> = this.compare,\n    container: U = ([] as unknown) as U,\n  ): typeof container {\n    container[0] = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n      if (comparator(arr[i - 1], arr[i]) !== 0) {\n        container[container.length] = arr[i];\n      }\n    }\n    return container;\n  }\n\n  /**\n   * Checks whether an array is sorted according to a provided comparator.\n   *\n   * @param arr the array to check\n   * @param [comparator] a custom comparator\n   * @return whether the array is sorted\n   *\n   * @example\n   *\n   * SortedArray.isSorted([1, 2, 3, 4, 8]);\n   * //=> true\n   */\n  static isSorted<T, U extends IndexedCollection<T>>(\n    arr: U,\n    comparator: Comparator<T> = this.compare,\n  ): boolean {\n    for (let i = 1; i < arr.length; i++) {\n      if (comparator(arr[i - 1], arr[i]) > 0) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Checks whether an array has any duplicating elements.\n   *\n   * @param arr the array to check\n   * @param [comparator] a custom comparator\n   * @return whether the array has duplicating elements\n   * @example\n   *\n   * SortedArray.isUnique([1, 2, 2, 3, 4]);\n   * //=> false\n   */\n  static isUnique<T, U extends IndexedCollection<T>>(\n    arr: U,\n    comparator: Comparator<T> = this.compare,\n  ) {\n    for (let i = 1; i < arr.length; i++) {\n      if (comparator(arr[i - 1], arr[i]) === 0) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Creates a new SortedArray instance with a variable number of arguments,\n   * regardless of number or type of the arguments\n   *\n   * @param elements the elements of which to create the array\n   * @return the new SortedArray\n   */\n  static of<U>(...elements: Array<U>): SortedArray<U> {\n    const result = (super.of(...elements) as unknown) as SortedArray<U>;\n    result.sort();\n    return result;\n  }\n\n  /**\n   * Returns a merger of the array with one or more provided sorted arrays.\n   *\n   * @param arrays sorted array(s) to merge\n   * @return a new SortedArray\n   */\n  concat(...arrays: Array<Array<ItemType>>): SortedArray<ItemType> {\n    const constructor = this.constructor as typeof SortedArray;\n    let result = this.slice(0) as SortedArray<ItemType>;\n    // TODO rewrite\n    for (let i = 0; i < arrays.length; i++) {\n      result = constructor.getUnion(\n        result,\n        arrays[i],\n        this.unique,\n        constructor.compare,\n        new constructor<ItemType>() as this,\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Uses binary search to quickly check if the element is the array.\n   * @param element the element to check\n   * @return whether the element is in the array\n   */\n  includes(element: ItemType): boolean {\n    return !!~this.indexOf(element);\n  }\n\n  /**\n   * Looks for the index of a given element in the array or -1\n   *\n   * @param element the element to look for\n   * @return the element's index in the array or -1\n   */\n  indexOf(element: ItemType): number {\n    return (this.constructor as typeof SortedArray).getIndex(this, element);\n  }\n\n  /**\n   * Checks if the array is sorted.\n   *\n   * @return whether the array is sorted\n   * @example\n   *\n   * //=> SortedArray [ 2, 3, 4, 5, 9 ];\n   * SortedArray.isSorted();\n   * //=> true\n   * SortedArray.reverse();\n   * SortedArray.isSorted();\n   * //=> false;\n   */\n  isSorted(): boolean {\n    return (this.constructor as typeof SortedArray).isSorted(this);\n  }\n\n  /**\n   * Checks if the array has duplicating elements.\n   *\n   * @return whether the array has duplicating elements\n   * @example\n   *\n   * //=> SortedArray [ 2, 3, 3, 4, 5, 9 ];\n   * SortedArray.isUnique();\n   * //=> false;\n   */\n  isUnique(): boolean {\n    return (this.constructor as typeof SortedArray).isUnique(this);\n  }\n\n  /**\n   * Adds provided elements to the array preserving the sorted order of the array.\n   *\n   * @param elements the elements to add to the array\n   * @return the new length of the array\n   */\n  push(...elements: Array<ItemType>): number {\n    const { compare } = this.constructor as typeof SortedArray;\n    const m = this.length;\n    if (!m) return super.push(...elements.sort(compare));\n    const toAdd = this.unique\n      ? elements.filter((el) => !~this.indexOf(el))\n      : elements;\n    const n = toAdd.length;\n    if (!n) return m;\n    toAdd.sort(compare);\n    for (let i = n - 1; i >= 0; i--) {\n      let j;\n      const last = this[m - 1];\n      for (j = m - 2; j >= 0 && compare(this[j], toAdd[i]) === 1; j--) {\n        this[j + 1] = this[j];\n      }\n      if (j !== m - 2 || compare(last, toAdd[i]) === 1) {\n        this[j + 1] = toAdd[i];\n        toAdd[i] = last;\n      }\n    }\n    return super.push(...toAdd);\n  }\n\n  /**\n   * Returns a range of elements of the array that are greater or equal to the provided\n   * starting element and less or equal to the provided ending element.\n   *\n   * @param start the starting element\n   * @param end the ending element\n   * @return the resulting range of elements\n   * @example\n   *\n   * //=> SortedArray [ 2, 3, 4, 5, 9 ];\n   * SortedArray.range(3, 5);\n   * // => [ 3, 4, 5 ]\n   * SortedArray.range(undefined, 4);\n   * // => [ 2, 3, 4 ]\n   * SortedArray.range(4);\n   * // => [ 4, 5, 8 ]\n   */\n  range(start?: ItemType, end?: ItemType): SortedArray<ItemType> {\n    const constructor = this.constructor as typeof SortedArray;\n    return constructor.getRange(this, start, end, constructor.compare, false);\n  }\n\n  /**\n   * Returns the rank of an element in the array.\n   *\n   * @param element the element to look for\n   * @return the rank in the array\n   * @example\n   *\n   * //=> SortedArray [ 2, 3, 4, 5, 9 ];\n   * SortedArray.rank(1);\n   * // => 0\n   * SortedArray.rank(6);\n   * // => 4\n   */\n  rank(element: ItemType): number {\n    const constructor = this.constructor as typeof SortedArray;\n    return constructor.getIndex(this, element, constructor.compare, true);\n  }\n\n  /**\n   * Implements in-place replacement of the array elements.\n   *\n   * @param arr an array of new elements to use\n   *\n   * @example\n   *\n   * //=> SortedArray [ 2, 3, 4, 5, 9 ];\n   * sortedArray.set([1, 2, 3]);\n   * //=> SortedArray [ 1, 2, 3 ]\n   */\n  set(arr: Array<ItemType>): this {\n    this.length = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n      this[i] = arr[i];\n    }\n    return this;\n  }\n\n  /**\n   * Sorts the array with a provided compare function.\n   *\n   * @param compareFunction the function to use for comparison\n   */\n  sort(\n    compareFunction: Comparator<ItemType> = (this\n      .constructor as typeof SortedArray).compare,\n  ): this {\n    return super.sort(compareFunction);\n  }\n\n  /**\n   * Changes the array by removing existing elements and adding new ones.\n   *\n   * @param start the index at which to start changing the array\n   * @param deleteCount the amount of old elements to delete\n   * @param elements the elements to add to the array\n   * @return an array of deleted elements\n   */\n  splice(\n    start: number,\n    deleteCount: number,\n    ...elements: Array<ItemType>\n  ): SortedArray<ItemType> {\n    const deletedElements = super.splice(\n      start,\n      deleteCount,\n    ) as SortedArray<ItemType>;\n    this.push(...elements);\n    return deletedElements;\n  }\n\n  /**\n   * Removes duplicating elements from the array.\n   *\n   * @example\n   *\n   * //=> SortedArray [ 2, 2, 3, 4, 5, 5, 9 ];\n   * sortedArray.uniquify();\n   * // => SortedArray [ 2, 3, 4, 5, 9 ]\n   */\n  uniquify() {\n    const constructor = this.constructor as typeof SortedArray;\n    return this.set(\n      constructor.getUnique(this, constructor.compare, new constructor()),\n    );\n  }\n\n  /**\n   * Adds provided elements to the array preserving the sorted order of the array.\n   *\n   * @param elements the elements to add to the array\n   * @return the new length of the array\n   */\n  unshift(...elements: Array<ItemType>) {\n    return this.push(...elements);\n  }\n}\n"]}