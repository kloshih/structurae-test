{"version":3,"file":"vector-view.js","sourceRoot":"","sources":["../src/vector-view.ts"],"names":[],"mappings":"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","sourcesContent":["import type { View } from \"./view.js\";\nimport type {\n  ComplexView,\n  ContainerView,\n  PrimitiveView,\n  ViewConstructor,\n  ViewInstance,\n  ViewSchema,\n} from \"./view-types.js\";\n\nexport class VectorView<T> extends DataView implements ContainerView<T> {\n  static View: ViewConstructor<\n    unknown,\n    PrimitiveView<unknown> | ContainerView<unknown> | ComplexView<unknown>\n  >;\n  static viewLength = 0;\n  static maxView: DataView;\n\n  get size(): number {\n    return (this.constructor as typeof VectorView).getSize(this);\n  }\n\n  static decode<T>(view: DataView, start = 0): Array<T | undefined> {\n    const View = this.View as ViewConstructor<T>;\n    const size = this.getSize(view, start);\n    const array = new Array(size) as Array<T | undefined>;\n    for (let i = 0; i < size; i++) {\n      const offset = this.getOffset(i, view, start);\n      array[i] = offset\n        ? View.decode(view, start + offset[0], offset[1])\n        : undefined;\n    }\n    return array;\n  }\n\n  static encode<T>(\n    value: Array<T>,\n    view: DataView,\n    start = 0,\n    length?: number,\n  ): number {\n    const { View } = this;\n    const items = value.length;\n    const lastOffset = (items + 1) << 2;\n    let end = lastOffset + 4;\n    let availableSpace = (length ?? view.byteLength) - end;\n    if (availableSpace < 1) return 0;\n    view.setUint32(start, items, true);\n    for (let i = 0; i < items; i++) {\n      const item = value[i];\n      const itemOffset = (i + 1) << 2;\n      view.setUint32(start + itemOffset, end, true);\n      let itemLength = 0;\n      if (item != null) {\n        const caret = start + end;\n        if (View.viewLength || View.itemLength) {\n          itemLength = View.getLength(value.length);\n          // stop encoding if no more space is available\n          if (itemLength > availableSpace) continue;\n          View.encode(item, view, caret, itemLength);\n        } else {\n          itemLength = View.encode(\n            item,\n            view,\n            caret,\n            length ? availableSpace : undefined,\n          );\n        }\n        end += itemLength;\n        availableSpace -= itemLength;\n      }\n    }\n    view.setUint32(start + lastOffset, end, true);\n    return end;\n  }\n\n  static from<T, U extends VectorView<T>>(value: Array<T>): U {\n    const { maxView } = this;\n    const end = this.encode(value, maxView);\n    return new this(maxView.buffer.slice(0, end)) as U;\n  }\n\n  static getLength<T>(value: Array<T>): number {\n    const { View } = this;\n    const items = value.length;\n    let length = (items + 2) << 2;\n    for (let i = 0; i < value.length; i++) {\n      if (value[i] !== undefined) {\n        length += View.getLength(value[i]);\n      }\n    }\n    return length;\n  }\n\n  static getOffset(\n    index: number,\n    view: DataView,\n    start = 0,\n  ): [start: number, length: number] | undefined {\n    const offset = start + ((index + 1) << 2);\n    const begin = view.getUint32(offset, true);\n    const end = view.getUint32(offset + 4, true);\n    if (begin === end) return undefined;\n    return [begin, end - begin];\n  }\n\n  static getSize(view: DataView, start = 0): number {\n    return view.getUint32(start, true);\n  }\n\n  static indexOf<T>(\n    value: T,\n    view: DataView,\n    startIndex = 0,\n    startOffset = 0,\n  ) {\n    const size = this.getSize(view, startOffset);\n    const valueView = this.View.from(value);\n    outer:\n    for (let i = startIndex; i < size; i++) {\n      const offset = this.getOffset(i, view, startOffset);\n      if (!offset || offset[1] !== valueView.byteLength) continue;\n      for (let j = 0; j < valueView.byteLength; j++) {\n        if (valueView.getUint8(j) !== view.getUint8(offset[0] + j)) {\n          continue outer;\n        }\n      }\n      return i;\n    }\n    return -1;\n  }\n\n  *[Symbol.iterator](): Generator<ViewInstance<T> | undefined> {\n    const { size } = this;\n    for (let i = 0; i < size; i++) {\n      yield this.getView(i);\n    }\n  }\n\n  at(index: number): T | undefined {\n    if (index < 0) return this.get(this.size + index);\n    return this.get(index);\n  }\n\n  get(index: number): T | undefined {\n    const View = (this.constructor as typeof VectorView)\n      .View as ViewConstructor<T>;\n    const offset = this.getOffset(index);\n    if (!offset) return undefined;\n    return View.decode(this, offset[0], offset[1]);\n  }\n\n  getLength(index: number): number {\n    const offset = this.getOffset(index);\n    return offset ? offset[1] : 0;\n  }\n\n  getOffset(index: number): [number, number] | undefined {\n    const length = this.getUint32(0, true);\n    if (index >= length) return undefined;\n    return (this.constructor as typeof VectorView).getOffset(index, this, 0);\n  }\n\n  getView(index: number): ViewInstance<T> | undefined {\n    const View = (this.constructor as typeof VectorView)\n      .View as ViewConstructor<T>;\n    const offset = this.getOffset(index);\n    if (!offset) return undefined;\n    return new View(this.buffer, this.byteOffset + offset[0], offset[1]);\n  }\n\n  indexOf(value: T, start = 0): number {\n    return (this.constructor as typeof VectorView).indexOf(\n      value,\n      this,\n      start,\n      0,\n    );\n  }\n\n  set(index: number, value: T): void {\n    const View = (this.constructor as typeof VectorView)\n      .View as ViewConstructor<T>;\n    const offset = this.getOffset(index);\n    if (!offset) return undefined;\n    View.encode(value, this, this.byteOffset + offset[0], offset[1]);\n  }\n\n  setView(index: number, value: DataView): void {\n    const offset = this.getOffset(index);\n    if (!offset) return undefined;\n    new Uint8Array(this.buffer, this.byteOffset + offset[0], offset[1]).set(\n      new Uint8Array(value.buffer, value.byteOffset, value.byteLength),\n    );\n  }\n\n  toJSON(): Array<T | undefined> {\n    return (this.constructor as typeof VectorView).decode(this, 0);\n  }\n\n  static initialize<T>(\n    schema: ViewSchema<T>,\n    Factory: View,\n    SchemaView?: ViewConstructor<T>,\n  ): ViewConstructor<Array<T | undefined>> {\n    const ItemView = SchemaView ?? Factory.getExistingView(schema);\n    return class extends this<T> {\n      static View = ItemView;\n      static maxView = Factory.maxView;\n    };\n  }\n}\n"]}