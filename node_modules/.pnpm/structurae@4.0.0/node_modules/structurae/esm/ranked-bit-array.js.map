{"version":3,"file":"ranked-bit-array.js","sourceRoot":"","sources":["../src/ranked-bit-array.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Bit } from \"./utility-types.js\";\nimport { BitArray } from \"./bit-array.js\";\nimport { getLSBIndex, popCount32 } from \"./utilities.js\";\n\n/**\n * A bit array that supports constant time rank and O(logN) time select operations.\n *\n * @example\n * const array = RankedBitArray.create(10);\n * array.setBit(1).setBit(3).setBit(7);\n * array.rank(2);\n * //=> 1\n * array.rank(7);\n * //=> 2\n * array.select(2);\n * //=> 3\n */\nexport class RankedBitArray extends BitArray {\n  /**\n   * The amount of bits in the array.\n   */\n  get size(): number {\n    return (this.length >> 1) << 5;\n  }\n\n  /**\n   * Returns the length of the underlying TypedArray required to hold the given amount of bits.\n   *\n   * @param size the amount of bits\n   * @return the required length\n   */\n  static getLength(size: number): number {\n    return Math.ceil(size / 32) << 1;\n  }\n\n  /**\n   * Returns the rank of a bit at a given index.\n   *\n   * @param index the index\n   * @return the rank\n   */\n  rank(index: number): number {\n    const { bucket, position } = this.getBitPosition(index);\n    const value = this[bucket];\n    // mask out following bits\n    const masked = value & ((1 << position) - 1);\n    const localRank = popCount32(masked);\n    const bucketRank = bucket ? this[(this.length >> 1) + bucket - 1] : 0;\n    return bucketRank + localRank;\n  }\n\n  /**\n   * Returns the select of a bit at a given index.\n   *\n   * @param index the index\n   * @return the select\n   */\n  select(index: number): number {\n    const middle = this.length >> 1;\n    let left = middle;\n    let right = this.length - 1;\n    let bucketRankId = 0;\n    while (left <= right) {\n      bucketRankId = (right + left) >> 1;\n      if (index > this[bucketRankId]) {\n        left = bucketRankId + 1;\n      } else if (index < this[bucketRankId]) {\n        right = bucketRankId - 1;\n      } else if (index === this[bucketRankId - 1]) {\n        // preceded by a duplicate\n        right = bucketRankId - 1;\n      } else {\n        break;\n      }\n    }\n    bucketRankId = index === this[bucketRankId] ? bucketRankId : left;\n\n    if (bucketRankId >= this.length) return -1;\n\n    let rank = bucketRankId > middle ? this[bucketRankId - 1] : 0;\n    const bucket = bucketRankId - middle;\n    let value = this[bucket];\n    while (value) {\n      const position = getLSBIndex(value);\n      value &= value - 1;\n      rank++;\n      if (rank === index) {\n        return (bucket << 5) + position;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Sets the bit at a given index.\n   *\n   * @param index the index\n   * @param value the value\n   * @return this\n   */\n  setBit(index: number, value: Bit = 1): this {\n    super.setBit(index, value);\n    const change = value || -1;\n    for (\n      let i = (this.length >> 1) + this.lastPosition.bucket;\n      i < this.length;\n      i++\n    ) {\n      this[i] += change;\n    }\n    return this;\n  }\n}\n"]}