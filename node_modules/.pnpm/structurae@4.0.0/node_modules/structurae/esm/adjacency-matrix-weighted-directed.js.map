{"version":3,"file":"adjacency-matrix-weighted-directed.js","sourceRoot":"","sources":["../src/adjacency-matrix-weighted-directed.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AdjacencyStructure,\n  AdjacencyStructureConstructor,\n  IndexedCollection,\n  TypedArrayConstructors,\n} from \"./utility-types.js\";\n\n/**\n * Creates an Adjacency Matrix class extending a given TypedArray class.\n *\n * @param Base a TypedArray class to extend\n */\nexport function AdjacencyMatrixWeightedDirectedMixin<\n  U extends TypedArrayConstructors,\n>(Base: U): AdjacencyStructureConstructor<U> {\n  // deno-lint-ignore no-empty-interface\n  interface AdjacencyMatrixWeightedDirected extends IndexedCollection {}\n  /**\n   * Implements Adjacency Matrix for weighted directed graphs.\n   */\n  class AdjacencyMatrixWeightedDirected extends Base\n    implements AdjacencyStructure {\n    static directed = true;\n    static weighted = true;\n    empty = 0;\n\n    static get [Symbol.species](): U {\n      return Base;\n    }\n\n    _vertices = 0;\n\n    get vertices() {\n      return (\n        this._vertices ||\n        (this._vertices = (this\n          .constructor as typeof AdjacencyMatrixWeightedDirected).getVertices(\n            this.length,\n          )), this._vertices\n      );\n    }\n\n    get edges() {\n      return this.vertices ** 2;\n    }\n\n    static create<\n      T extends AdjacencyStructureConstructor<TypedArrayConstructors>,\n    >(vertices: number): InstanceType<T> {\n      const length = this.getLength(vertices);\n      return new this(length) as InstanceType<T>;\n    }\n\n    static getLength(vertices: number): number {\n      return vertices * vertices;\n    }\n\n    protected static getVertices(length: number): number {\n      return Math.sqrt(length);\n    }\n\n    addEdge(x: number, y: number, weight: number): this {\n      this[this.getIndex(x, y)] = weight;\n      return this;\n    }\n\n    getEdge(x: number, y: number) {\n      return this[this.getIndex(x, y)];\n    }\n\n    getIndex(x: number, y: number): number {\n      return x * this.vertices + y;\n    }\n\n    hasEdge(x: number, y: number) {\n      const edge = this.getEdge(x, y);\n      return edge !== undefined && edge !== this.empty;\n    }\n\n    *inEdges(vertex: number) {\n      const { vertices } = this;\n      for (let i = 0; i < vertices; i++) {\n        if (this.hasEdge(i, vertex)) yield i;\n      }\n    }\n\n    isFull(): boolean {\n      return false;\n    }\n\n    *outEdges(vertex: number) {\n      const { vertices } = this;\n      const offset = vertex * vertices;\n      for (let i = 0; i < vertices; i++) {\n        const edge = this[offset + i];\n        if (edge !== undefined && edge !== this.empty) yield i;\n      }\n    }\n\n    removeEdge(x: number, y: number): this {\n      this[this.getIndex(x, y)] = this.empty;\n      return this;\n    }\n  }\n\n  return AdjacencyMatrixWeightedDirected;\n}\n"]}