{"version":3,"file":"bit-array.js","sourceRoot":"","sources":["../src/bit-array.ts"],"names":[],"mappings":"AAOA;;;;;;;;;;;;;;GAcG;AACH,MAAM,OAAO,QAAS,SAAQ,WAAW;IAAzC;;QACE;;;;mBAA4B,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE;WAAC;IAkEzD,CAAC;IAhEC,MAAM,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;QACzB,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,MAAM,CAEX,IAAY;QAEZ,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAoB,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,SAAS,CAAC,IAAY;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAa;QAClB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACxD,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAQ,CAAC;IACjD,CAAC;IAED,cAAc,CAAC,KAAa;QAC1B,MAAM,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,KAAa,EAAE,QAAa,CAAC;QAClC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,QAAQ,CAAC,CAAC;QACvE,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import type { Bit } from \"./utility-types.js\";\n\ntype BitPosition = {\n  bucket: number;\n  position: number;\n};\n\n/**\n * Uses Uint32Array as an array or vector of bits. It's a simpler version of BitField\n * that only sets and checks individual bits.\n *\n * @example\n * const array = BitArray.create(10);\n * array.getBit(0);\n * //=> 0\n * array.setBit(0).getBit(0);\n * //=> 1\n * array.size;\n * //=> 10\n * array.length;\n * //=> 1\n */\nexport class BitArray extends Uint32Array {\n  lastPosition: BitPosition = { bucket: 0, position: 0 };\n\n  static get [Symbol.species](): Uint32ArrayConstructor {\n    return Uint32Array;\n  }\n\n  /**\n   * The amount of bits in the array.\n   */\n  get size(): number {\n    return this.length << 5;\n  }\n\n  /**\n   * Creates a BitArray of the specified size.\n   *\n   * @param size the maximum amount of bits in the array\n   * @return a new BitArray\n   */\n  static create<T extends typeof BitArray>(\n    this: T,\n    size: number,\n  ): InstanceType<T> {\n    return new this(this.getLength(size)) as InstanceType<T>;\n  }\n\n  /**\n   * Returns the length of the underlying TypedArray required to hold the given amount of bits.\n   *\n   * @param size the amount of bits\n   * @return the required length\n   */\n  static getLength(size: number): number {\n    return Math.ceil(size / 32);\n  }\n\n  /**\n   * Returns the bit at a given index.\n   *\n   * @param index the index\n   * @return the bit\n   */\n  getBit(index: number): Bit {\n    const { bucket, position } = this.getBitPosition(index);\n    return ((this[bucket] >> position) & 1) as Bit;\n  }\n\n  getBitPosition(index: number): BitPosition {\n    const bucket = index >> 5;\n    this.lastPosition.bucket = bucket;\n    this.lastPosition.position = index - (bucket << 5);\n    return this.lastPosition;\n  }\n\n  /**\n   * Sets the bit at a given index.\n   *\n   * @param index the index\n   * @param value the value\n   * @return this\n   */\n  setBit(index: number, value: Bit = 1): this {\n    const { bucket, position } = this.getBitPosition(index);\n    this[bucket] = (this[bucket] & ~(1 << position)) | (value << position);\n    return this;\n  }\n}\n"]}