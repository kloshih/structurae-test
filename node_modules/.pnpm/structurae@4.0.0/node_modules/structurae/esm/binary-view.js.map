{"version":3,"file":"binary-view.js","sourceRoot":"","sources":["../src/binary-view.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,UAAW,SAAQ,QAAQ;IAEtC,MAAM,CAAC,MAAM,CAAC,IAAc,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,UAAU;QAC/D,OAAO,IAAI,UAAU,CACnB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,IAAI,CAAC,UAAU,GAAG,KAAK,EACvB,IAAI,CAAC,UAAU,GAAG,KAAK,GAAG,MAAM,CACjC,CACF,CAAC;IACJ,CAAC;IACD,MAAM,CAAC,MAAM,CAAC,KAAiB,EAAE,IAAc,EAAE,KAAK,GAAG,CAAC,EAAE,MAAe;QACzE,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,KAAK,CAAC,UAAU,GAAG,MAAM;YAC/C,CAAC,CAAC,KAAK,CAAC,UAAU;YAClB,CAAC,CAAC,MAAM,CAAC;QACX,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAC/D,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,EACpD,KAAK,CACN,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,KAAiB;QAC3B,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IACpE,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,IAAY;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,GAAG;QACD,OAAQ,IAAI,CAAC,WAAiC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9D,CAAC;IACD,GAAG,CAAC,KAAiB;QAClB,IAAI,CAAC,WAAiC,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC9D,CAAC;IACD,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,UAAU;QACf,OAAO,IAAI,CAAC;IACd,CAAC;;AAxCM;;;;WAAa,CAAC;GAAC","sourcesContent":["import type { PrimitiveView, ViewConstructor } from \"./view-types.js\";\n\nexport class BinaryView extends DataView implements PrimitiveView<Uint8Array> {\n  static viewLength = 0;\n  static decode(view: DataView, start = 0, length = view.byteLength) {\n    return new Uint8Array(\n      view.buffer.slice(\n        view.byteOffset + start,\n        view.byteOffset + start + length,\n      ),\n    );\n  }\n  static encode(value: Uint8Array, view: DataView, start = 0, length?: number) {\n    const size = !length || value.byteLength < length\n      ? value.byteLength\n      : length;\n    new Uint8Array(view.buffer, view.byteOffset, view.byteLength).set(\n      new Uint8Array(value.buffer, value.byteOffset, size),\n      start,\n    );\n    return size;\n  }\n\n  static from(value: Uint8Array) {\n    return new this(value.buffer, value.byteOffset, value.byteLength);\n  }\n\n  static getLength(size: number) {\n    return size;\n  }\n\n  get() {\n    return (this.constructor as typeof BinaryView).decode(this);\n  }\n  set(value: Uint8Array) {\n    (this.constructor as typeof BinaryView).encode(value, this);\n  }\n  toJSON() {\n    return this.get();\n  }\n\n  static initialize(): ViewConstructor<Uint8Array, PrimitiveView<Uint8Array>> {\n    return this;\n  }\n}\n"]}