export class Uint8View extends DataView {
    static decode(view, start = 0) {
        return DataView.prototype.getUint8.call(view, start);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setUint8.call(view, start, value);
        return this.viewLength;
    }
    static from(value) {
        const typeView = new this(new ArrayBuffer(this.viewLength));
        this.encode(value, typeView, 0);
        return typeView;
    }
    static getLength() {
        return this.viewLength;
    }
    get() {
        return this.constructor.decode(this);
    }
    set(value) {
        this.constructor.encode(value, this);
        return this;
    }
    toJSON() {
        return this.constructor.decode(this);
    }
    static initialize() {
        return this;
    }
}
Object.defineProperty(Uint8View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 1
});
export class Int8View extends Uint8View {
    static decode(view, start = 0) {
        return DataView.prototype.getInt8.call(view, start);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setInt8.call(view, start, value);
        return this.viewLength;
    }
}
Object.defineProperty(Int8View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 1
});
export class Int16View extends Uint8View {
    static decode(view, start = 0) {
        return DataView.prototype.getInt16.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setInt16.call(view, start, value, true);
        return this.viewLength;
    }
}
Object.defineProperty(Int16View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 2
});
export class Uint16View extends Uint8View {
    static decode(view, start = 0) {
        return DataView.prototype.getUint16.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setUint16.call(view, start, value, true);
        return this.viewLength;
    }
}
Object.defineProperty(Uint16View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 2
});
export class Int32View extends Uint8View {
    static decode(view, start = 0) {
        return DataView.prototype.getInt32.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setInt32.call(view, start, value, true);
        return this.viewLength;
    }
}
Object.defineProperty(Int32View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 4
});
export class Uint32View extends Uint8View {
    static decode(view, start = 0) {
        return DataView.prototype.getUint32.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setUint32.call(view, start, value, true);
        return this.viewLength;
    }
}
Object.defineProperty(Uint32View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 4
});
export class Float32View extends Uint8View {
    static decode(view, start = 0) {
        return DataView.prototype.getFloat32.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setFloat32.call(view, start, value, true);
        return this.viewLength;
    }
}
Object.defineProperty(Float32View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 4
});
export class Float64View extends Uint8View {
    static decode(view, start = 0) {
        return DataView.prototype.getFloat64.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setFloat64.call(view, start, value, true);
        return this.viewLength;
    }
}
Object.defineProperty(Float64View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 8
});
export class BigInt64View extends DataView {
    static decode(view, start = 0) {
        return DataView.prototype.getBigInt64.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setBigInt64.call(view, start, value, true);
        return this.viewLength;
    }
    static from(value) {
        const typeView = new this(new ArrayBuffer(this.viewLength));
        this.encode(value, typeView, 0);
        return typeView;
    }
    static getLength() {
        return this.viewLength;
    }
    get() {
        return this.constructor.decode(this);
    }
    set(value) {
        this.constructor.encode(value, this);
        return this;
    }
    toJSON() {
        // todo fix bigint is not serializable in JSON
        return this.constructor.decode(this);
    }
    static initialize() {
        return this;
    }
}
Object.defineProperty(BigInt64View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 8
});
export class BigUint64View extends BigInt64View {
    static decode(view, start = 0) {
        return DataView.prototype.getBigUint64.call(view, start, true);
    }
    static encode(value, view, start = 0) {
        DataView.prototype.setBigUint64.call(view, start, value, true);
        return this.viewLength;
    }
}
Object.defineProperty(BigUint64View, "viewLength", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 8
});
//# sourceMappingURL=numeric-view.js.map