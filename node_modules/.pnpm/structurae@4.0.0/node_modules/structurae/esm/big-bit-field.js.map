{"version":3,"file":"big-bit-field.js","sourceRoot":"","sources":["../src/big-bit-field.ts"],"names":[],"mappings":"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","sourcesContent":["import { getBitSize } from \"./utilities.js\";\nimport type {\n  BitFieldConstructor,\n  BitFieldStructure,\n} from \"./bit-field-types.js\";\n\nconst SIGN_BIT = BigInt(2147483647);\nconst ZERO = BigInt(0);\nconst ONE = BigInt(1);\nconst TWO = BigInt(2);\n\nclass BigBitField<K extends PropertyKey>\n  implements BitFieldStructure<K, bigint> {\n  static schema: Record<PropertyKey, bigint>;\n  static fields: Array<PropertyKey>;\n  static masks: Record<PropertyKey, bigint>;\n  static offsets: Record<PropertyKey, bigint>;\n  static mask: bigint;\n  static size: bigint;\n  value = ZERO;\n\n  constructor(\n    data: bigint | BigBitField<K> | Array<number> | Record<K, number> = ZERO,\n  ) {\n    this.value = data instanceof BigBitField\n      ? data.valueOf()\n      : typeof data === \"object\"\n      ? (this.constructor as typeof BigBitField).encode(data)\n      : BigInt(data);\n  }\n\n  static decode<K extends PropertyKey>(data: bigint): Record<K, number> {\n    const schema = this.schema as Record<K, bigint>;\n    const fields = this.fields as Array<K>;\n    const masks = this.masks as Record<K, bigint>;\n    const result = {} as Record<K, number>;\n    let value = data;\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      result[field] = Number(value & masks[field]);\n      value >>= schema[field];\n    }\n    return result;\n  }\n\n  static encode<K extends PropertyKey>(\n    data: Array<number> | Record<K, number>,\n  ): bigint {\n    const schema = this.schema as Record<K, bigint>;\n    const fields = this.fields as Array<K>;\n    const array = Array.isArray(data)\n      ? data\n      : fields.map((name) => data[name] || 0);\n    let result = ZERO;\n    for (let i = fields.length - 1; i >= 0; i--) {\n      const field = fields[i];\n      const current = array[i];\n      result <<= schema[field];\n      result |= BigInt(current);\n    }\n    return result;\n  }\n\n  static getMatcher<K extends PropertyKey>(\n    matcher: Partial<Record<K, number>>,\n  ): [bigint, bigint] {\n    const { masks, offsets } = this;\n    const fields = Object.keys(matcher) as Array<K>;\n    let mask = ZERO;\n    let value = ZERO;\n    for (let i = 0; i < fields.length; i++) {\n      const fieldName = fields[i];\n      const offset: bigint = offsets[fieldName];\n      const fieldMask = masks[fieldName] << offset;\n      const fieldValue = BigInt(matcher[fieldName]!);\n      value = (value & ~fieldMask) | (fieldValue << offsets[fieldName]);\n      mask |= fieldMask;\n    }\n    return [value, this.mask ^ mask];\n  }\n\n  static getMinSize(number: number): number {\n    return getBitSize(number);\n  }\n\n  static isValid<K extends PropertyKey>(\n    data: Partial<Record<K, number>>,\n  ): boolean {\n    const { masks } = this;\n    const fields = Object.keys(data) as Array<K>;\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      const value = BigInt(data[field]!);\n      if ((value & SIGN_BIT) !== value || value > masks[field]) return false;\n    }\n    return true;\n  }\n\n  static match(value: bigint, matcher: [bigint, bigint]) {\n    return (value & matcher[1]) === matcher[0];\n  }\n\n  *[Symbol.iterator](): Generator<number> {\n    const { fields } = this.constructor as BitFieldConstructor<K, bigint>;\n    for (let i = 0; i < fields.length; i++) {\n      yield this.get(fields[i]);\n    }\n  }\n\n  get(field: K): number {\n    const { offsets, masks } = this.constructor as BitFieldConstructor<\n      K,\n      bigint\n    >;\n    const value = (this.value >> offsets[field]) & masks[field];\n    return Number(value);\n  }\n\n  has(...fields: Array<K>): boolean {\n    const { offsets } = this.constructor as BitFieldConstructor<K, bigint>;\n    let mask = ZERO;\n    for (let i = 0; i < fields.length; i++) {\n      mask |= ONE << offsets[fields[i]];\n    }\n    mask |= this.value;\n    return this.value === mask;\n  }\n\n  match(matcher: Partial<Record<K, number>> | [bigint, bigint]): boolean {\n    return (this.constructor as BitFieldConstructor<K, bigint>).match(\n      this.value,\n      Array.isArray(matcher)\n        ? matcher\n        : (this.constructor as BitFieldConstructor<K, bigint>).getMatcher(\n          matcher,\n        ),\n    );\n  }\n\n  set(field: K, value = 1) {\n    const { offsets, masks } = this.constructor as BitFieldConstructor<\n      K,\n      bigint\n    >;\n    const offset: bigint = offsets[field];\n    this.value = (this.value & ~(masks[field] << offset)) |\n      (BigInt(value) << offsets[field]);\n    return this;\n  }\n\n  toJSON() {\n    return this.value;\n  }\n\n  toObject(): Record<K, number> {\n    return (this.constructor as BitFieldConstructor<K, bigint>).decode(\n      this.value,\n    );\n  }\n\n  toString(): string {\n    return this.value.toString();\n  }\n\n  valueOf(): bigint {\n    return this.value;\n  }\n}\n\n/**\n * Creates a BigBitField class with a given schema. BigBitField uses bigints as bitfields\n * to store and operate on data using bitwise operations.\n *\n * @param schema the schema\n * @returns the BigBitFieldClass\n *\n * @example\n * const LargeField = BitFieldMixin({ width: 20, height: 20 });\n * const largeField = new LargeField({ width: 1048576, height: 1048576 });\n * largeField.value\n * //=> 1099512676352n\n * largeField.set('width', 1000).get('width')\n * //=> 1000\n * largeField.toObject()\n * //=> { width: 1000, height: 1048576 }\n */\nexport function BigBitFieldMixin<\n  T extends Record<K, number>,\n  K extends keyof T,\n>(schema: T): BitFieldConstructor<K, bigint> {\n  const fields = Object.keys(schema) as Array<K>;\n  const _schema = {} as Record<K, bigint>;\n  const masks = {} as Record<K, bigint>;\n  const offsets = {} as Record<K, bigint>;\n  let lastOffset = ZERO;\n  for (let i = 0; i < fields.length; i++) {\n    const field = fields[i];\n    const size = BigInt(schema[field]);\n    _schema[field] = size;\n    masks[field] = (TWO << (size - ONE)) - ONE;\n    offsets[field] = lastOffset;\n    lastOffset += size;\n  }\n\n  return class extends BigBitField<K> {\n    static schema = _schema;\n    static fields = fields;\n    static masks = masks;\n    static offsets = offsets;\n    static size = lastOffset;\n    static mask = TWO << (BigInt(lastOffset) - ONE);\n  };\n}\n"]}