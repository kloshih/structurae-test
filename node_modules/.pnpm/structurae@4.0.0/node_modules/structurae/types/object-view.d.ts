import type { Constructor } from "./utility-types.js";
import type { ComplexView, ViewConstructor, ViewInstance, ViewLayout, ViewSchema } from "./view-types.js";
import type { View } from "./view.js";
export declare class ObjectView<T extends object> extends DataView implements ComplexView<T> {
    static viewLength: number;
    static layout?: ViewLayout<unknown>;
    static fields: Array<unknown>;
    static defaultData?: Uint8Array;
    static ObjectConstructor: Constructor<unknown>;
    static decode<T extends object>(view: DataView, start?: number, _?: number): T;
    static encode<T extends object>(value: T, view: DataView, start?: number, length?: number, amend?: boolean): number;
    static from<T extends object, U extends ObjectView<T>>(value: T): U;
    static getLength(): number;
    get<P extends keyof T>(field: P): T[P];
    getLength<P extends keyof T>(field: P): number;
    getView<P extends keyof T>(field: P): ViewInstance<T[P]>;
    set<P extends keyof T>(field: P, value: T[P]): void;
    setView<P extends keyof T>(field: P, view: DataView): void;
    toJSON(): T;
    static initialize<T extends object>(schema: ViewSchema<T>, Factory: View, constructor?: Constructor<T>): ViewConstructor<T, ComplexView<T>>;
}
