import type { ComplexView, ContainerView, PrimitiveView, ViewConstructor, ViewInstance, ViewSchema } from "./view-types.js";
import type { View } from "./view.js";
export declare class ArrayView<T> extends DataView implements ContainerView<T> {
    static View: ViewConstructor<unknown, PrimitiveView<unknown> | ContainerView<unknown> | ComplexView<unknown>>;
    static viewLength: number;
    static itemLength: number;
    get size(): number;
    static decode<T>(view: DataView, start?: number, length?: number): Array<T>;
    static encode<T>(value: Array<T>, view: DataView, start?: number, length?: number): number;
    static from<T, U extends ArrayView<T>>(value: Array<T>): U;
    static getLength(size: number): number;
    static getOffset(index: number): number;
    static getSize(length: number): number;
    static indexOf<T>(value: T, view: DataView, startIndex?: number, startOffset?: number, length?: number): number;
    [Symbol.iterator](): Generator<ViewInstance<T>>;
    at(index: number): T;
    get(index: number): T;
    getLength(_: number): number;
    getView(index: number): ViewInstance<T>;
    indexOf(value: T, start?: number): number;
    set(index: number, value: T): void;
    setView(index: number, value: DataView): void;
    toJSON(): Array<T>;
    static initialize<T>(schema: ViewSchema<T>, Factory: View, SchemaView?: ViewConstructor<T>, length?: number): ViewConstructor<Array<T>>;
}
