import type { Bit } from "./utility-types.js";
declare type BitPosition = {
    bucket: number;
    position: number;
};
/**
 * Uses Uint32Array as an array or vector of bits. It's a simpler version of BitField
 * that only sets and checks individual bits.
 *
 * @example
 * const array = BitArray.create(10);
 * array.getBit(0);
 * //=> 0
 * array.setBit(0).getBit(0);
 * //=> 1
 * array.size;
 * //=> 10
 * array.length;
 * //=> 1
 */
export declare class BitArray extends Uint32Array {
    lastPosition: BitPosition;
    static get [Symbol.species](): Uint32ArrayConstructor;
    /**
     * The amount of bits in the array.
     */
    get size(): number;
    /**
     * Creates a BitArray of the specified size.
     *
     * @param size the maximum amount of bits in the array
     * @return a new BitArray
     */
    static create<T extends typeof BitArray>(this: T, size: number): InstanceType<T>;
    /**
     * Returns the length of the underlying TypedArray required to hold the given amount of bits.
     *
     * @param size the amount of bits
     * @return the required length
     */
    static getLength(size: number): number;
    /**
     * Returns the bit at a given index.
     *
     * @param index the index
     * @return the bit
     */
    getBit(index: number): Bit;
    getBitPosition(index: number): BitPosition;
    /**
     * Sets the bit at a given index.
     *
     * @param index the index
     * @param value the value
     * @return this
     */
    setBit(index: number, value?: Bit): this;
}
export {};
