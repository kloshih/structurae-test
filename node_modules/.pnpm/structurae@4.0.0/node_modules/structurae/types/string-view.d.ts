import type { IndexedCollection } from "./utility-types.js";
import type { PrimitiveView, ViewConstructor } from "./view-types.js";
export declare class StringView extends DataView implements PrimitiveView<string> {
    static viewLength: number;
    static masks: Int8Array;
    static decoder: TextDecoder;
    static encoder: TextEncoder;
    /**
     * The amount of UTF characters in the StringView.
     */
    get size(): number;
    /**
     * Converts a UTF8 byte array into a JS string.
     * Adopted from Google Closure:
     * https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js
     *
     * @param view the view to decode
     * @param start the starting offset
     * @param length the byte length to decode
     * @return the JavaScript value
     */
    static decode(view: DataView, start?: number, length?: number): string;
    /**
     * Converts a JS string into a UTF8 byte array.
     * Adopted from Deno:
     * https://github.com/denoland/deno/blob/18a684ab1c20914e13c27bc10e20bda6396ea38d/extensions/web/08_text_encoding.js#L79
     *
     * @param value the value to encode
     * @param view the view to encode into
     * @param start the view offset to start
     * @param length the byte length to encode
     * @return the amount of written bytes
     */
    static encode(value: string, view: DataView, start?: number, length?: number): number;
    /**
     * Creates a StringView from a string or an array like object.
     *
     * @param value the string to encode
     * @return the new view
     */
    static from(value: string): StringView;
    /**
     * Returns the size in bytes of a given string.
     *
     * @param string the string to check
     * @return the size in bytes
     */
    static getLength(string?: string): number;
    /**
     * Returns a new string consisting of the single UTF character
     * located at the specified character index.
     *
     * @param index a character index
     * @return a string representing the character
     */
    charAt(index?: number): string;
    /**
     * Iterates over the characters in the StringView.
     */
    characters(): Generator<string, void, unknown>;
    /**
     * Returns the string encoded in the StringView.
     */
    get(): string;
    /**
     * Returns the index of the first byte of a character.
     *
     * @param index a character index
     * @return the index of the first byte of a character
     */
    getCharStart(index: number, startCharIndex?: number, startIndex?: number): number;
    /**
     * Performs an in-place replacement within the StringView
     * of all occurrences of a given pattern with a given replacement.
     *
     * @param pattern the pattern to be replaced
     * @param replacement the replacement
     * @return this
     */
    replace(pattern: IndexedCollection, replacement: IndexedCollection): this;
    /**
     * Reverses the characters of the StringView in-place.
     *
     * @return this
     */
    reverse(): this;
    /**
     * Checks whether the provided encoded sequence is found inside the view.
     *
     * @param searchValue the value to search for
     * @param position the starting position
     * @return whether the value is found
     */
    includes(searchValue: IndexedCollection, position?: number): boolean;
    /**
     * Returns the index within the StringView
     * of the first occurrence of the specified value, starting the search at start.
     * Returns -1 if the value is not found.
     *
     * @param searchValue the value to search for
     * @param fromIndex the index at which to start the search
     * @return the index of the first occurrence of the specified value
     */
    indexOf(searchValue: IndexedCollection, fromIndex?: number): number;
    searchNaive(searchValue: IndexedCollection, start: number): number;
    searchShiftOr(searchValue: IndexedCollection, start: number): number;
    /**
     * Encodes a given string into the StringView
     */
    set(value: string): void;
    /**
     * Returns a string of characters between the start and end
     * character indexes, or to the end of the string.
     *
     * @param indexStart the character index of the first character to include
     * @param indexEnd the character index of the first character to exclude
     * @return a new string containing the specified part of the given string
     */
    substring(indexStart?: number, indexEnd?: number): string;
    toChar(index: number): string;
    /**
     * Returns a string value of the StringView.
     */
    toJSON(): string;
    /**
     * Returns a string value of the StringView.
     */
    toString(): string;
    /**
     * Returns a StringView without trailing zeros.
     */
    trim(): StringView;
    swapChar(i: number, j: number): void;
    static initialize(): ViewConstructor<string, PrimitiveView<string>>;
}
