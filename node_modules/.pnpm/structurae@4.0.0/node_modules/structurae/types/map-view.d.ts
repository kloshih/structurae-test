import type { Constructor } from "./utility-types.js";
import type { View } from "./view.js";
import type { ComplexView, ViewConstructor, ViewInstance, ViewLayout, ViewSchema } from "./view-types.js";
export declare class MapView<T extends object> extends DataView implements ComplexView<T> {
    static viewLength: number;
    static layout: ViewLayout<unknown>;
    static lengthOffset: number;
    static optionalOffset: number;
    static fields: Array<unknown>;
    static optionalFields: Array<unknown>;
    static maxView: DataView;
    static defaultData?: Uint8Array;
    static ObjectConstructor: Constructor<unknown>;
    static decode<T>(view: DataView, start?: number): T;
    static encode<T>(value: T, view: DataView, start?: number, length?: number, amend?: boolean): number;
    static from<T extends object, U extends MapView<T>>(value: T): U;
    static getLength<T>(value: T): number;
    get<P extends keyof T>(field: P): T[P] | undefined;
    getLength<P extends keyof T>(field: P): number;
    getLayout<P extends keyof T>(field: P): [ViewConstructor<T[P]>, number, number] | undefined;
    getView<P extends keyof T>(field: P): ViewInstance<T[P]> | undefined;
    set<P extends keyof T>(field: P, value: T[P]): undefined;
    setView<P extends keyof T>(field: P, view: DataView): undefined;
    toJSON(): T;
    static initialize<T extends object>(schema: ViewSchema<T>, Factory: View, constructor: Constructor<T>): ViewConstructor<T, ComplexView<T>>;
}
