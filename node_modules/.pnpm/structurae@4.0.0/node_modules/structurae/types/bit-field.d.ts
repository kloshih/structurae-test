import type { BitFieldConstructor } from "./bit-field-types.js";
/**
 * Creates a BitField class from with a given schema. BitField uses numbers as bitfields
 * to store and operate on data using bitwise operations. The size of the field is limited to 31 bits,
 * for a larger bitfields consider using BigBitField class that uses bigints instead.
 *
 * @param schema the schema
 * @returns the BitFieldClass
 *
 * @example
 * const Field = BitFieldMixin({ width: 8, height: 8 });
 * const field = new Field({ width: 100, height: 200 });
 * field.get('width');
 * //=> 100;
 * field.get('height');
 * //=> 200
 * field.set('width', 18);
 * field.get('width');
 * //=> 18
 * field.toObject();
 * //=> { width: 18, height: 200 }
 */
export declare function BitFieldMixin<T extends Record<K, number>, K extends keyof T>(schema: T): BitFieldConstructor<K>;
declare const _BitField: BitFieldConstructor<0 | 2 | 1 | 22 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30, number>;
export { _BitField as BitField };
