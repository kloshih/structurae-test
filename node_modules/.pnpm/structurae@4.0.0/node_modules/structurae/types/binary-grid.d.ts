import type { Bit } from "./utility-types.js";
/**
 * Implements a grid or 2D matrix of bits.
 */
export declare class BinaryGrid extends Uint32Array {
    size: number;
    static get [Symbol.species](): Uint32ArrayConstructor;
    /**
     * Number of columns in the grid.
     */
    get columns(): number;
    /**
     * Specifies the number of columns of the grid.
     */
    set columns(columns: number);
    /**
     * Number of rows in the grid.
     */
    get rows(): number;
    /**
     * Creates a binary grid of specified dimensions.
     *
     * @param rows the amount of rows
     * @param columns the amount of columns
     * @return a new binary grid
     */
    static create(rows: number, columns?: number): BinaryGrid;
    /**
     * Creates a new binary grid from an array of arrays representing rows and item value of the grid.
     *
     * @param arrays the array of arrays
     * @return a new binary grid
     */
    static fromArrays(arrays: Array<Array<Bit>>): BinaryGrid;
    /**
     * Returns the length of the underlying TypedArray required to hold a grid of specified dimensions.
     *
     * @param rows the amount of rows
     * @param columns the amount of columns
     * @return the required length
     */
    static getLength(rows: number, columns?: number): number;
    getCoordinates(row: number, column?: number): [bucket: number, position: number];
    /**
     * Returns the index of an item holding the bit at given coordinates.
     *
     * @param rows the row index
     * @param columns the column index
     * @return the item index
     */
    getIndex(row: number, column?: number): number;
    /**
     * Returns the bit at given coordinates.
     *
     * @param rows the row index
     * @param columns the column index
     * @return the bit
     */
    getValue(row: number, column: number): Bit;
    /**
     * Sets the bit at given coordinates.
     *
     * @param rows the row index
     * @param columns the column index
     * @param value the bit
     * @return the grid
     */
    setValue(row: number, column: number, value?: Bit): this;
    /**
     * Creates an array of arrays representing rows of the grid.
     *
     * @return an array of arrays
     */
    toArrays(): Array<Array<Bit>>;
}
