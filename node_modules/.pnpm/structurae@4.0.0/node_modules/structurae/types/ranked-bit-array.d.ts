import type { Bit } from "./utility-types.js";
import { BitArray } from "./bit-array.js";
/**
 * A bit array that supports constant time rank and O(logN) time select operations.
 *
 * @example
 * const array = RankedBitArray.create(10);
 * array.setBit(1).setBit(3).setBit(7);
 * array.rank(2);
 * //=> 1
 * array.rank(7);
 * //=> 2
 * array.select(2);
 * //=> 3
 */
export declare class RankedBitArray extends BitArray {
    /**
     * The amount of bits in the array.
     */
    get size(): number;
    /**
     * Returns the length of the underlying TypedArray required to hold the given amount of bits.
     *
     * @param size the amount of bits
     * @return the required length
     */
    static getLength(size: number): number;
    /**
     * Returns the rank of a bit at a given index.
     *
     * @param index the index
     * @return the rank
     */
    rank(index: number): number;
    /**
     * Returns the select of a bit at a given index.
     *
     * @param index the index
     * @return the select
     */
    select(index: number): number;
    /**
     * Sets the bit at a given index.
     *
     * @param index the index
     * @param value the value
     * @return this
     */
    setBit(index: number, value?: Bit): this;
}
