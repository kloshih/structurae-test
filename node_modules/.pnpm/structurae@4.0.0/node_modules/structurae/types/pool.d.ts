import { BitArray } from "./bit-array.js";
/**
 * Implements a fast algorithm to manage availability of objects in an object pool using a BitArray.
 *
 * @example
 * // create a pool of 1600 indexes
 * const pool = Pool.create(100 * 16);
 *
 * // get the next available index and make it unavailable
 * pool.get();
 * //=> 0
 * pool.get();
 * //=> 1
 *
 * // set index available
 * pool.free(0);
 * pool.get();
 * //=> 0
 *
 * pool.get();
 * //=> 2
 */
export declare class Pool extends BitArray {
    nextAvailable: number;
    /**
     * Creates a Pool of the specified size.
     *
     * @param size the size of the pool
     * @return a new Pool
     */
    static create<T extends typeof BitArray>(this: T, size: number): InstanceType<T>;
    /**
     * Makes a given index available.
     *
     * @param index index to be freed
     */
    free(index: number): void;
    /**
     * Gets the next available index in the pool.
     *
     * @return the next available index
     */
    get(): number;
}
