/**
 * Extends Array to implement the Binary Heap data structure.
 * // TODO (docs) document priority queue operations
 * // todo add heapsort?
 */
export declare class BinaryHeap<T> extends Array<T> {
    constructor(...args: any[]);
    static get [Symbol.species](): ArrayConstructor;
    /**
     * The comparator function used by the heap.
     *
     * @param a first value to compare
     * @param b second value to compare
     * @return whether first value is less than the second
     */
    static compare(a: unknown, b: unknown): boolean;
    /**
     * Creates a new BinaryHeap from a given array-like object.
     */
    static from<T>(iterable: Iterable<T> | ArrayLike<T>): BinaryHeap<T>;
    /**
     * Get left child index from parent index.
     *
     * @param index the parent index
     * @return the index of the left child
     */
    static getLeftIndex(index: number): number;
    /**
     * Get left child index from parent index.
     *
     * @param index the child index
     * @return the index of the parent
     */
    static getParentIndex(index: number): number;
    /**
     * Get right child index from parent index.
     *
     * @param index the parent index
     * @return the index of the right child
     */
    static getRightIndex(index: number): number;
    /**
     * Checks if a given collection is a valid binary heap.
     */
    static isHeap<T>(heap: ArrayLike<T>): boolean;
    /**
     * Creates a new BinaryHeap with a variable number of arguments,
     * regardless of number or type of the arguments.
     *
     * @param elements the elements of which to create the heap
     * @return the new BinaryHeap
     */
    static of<T>(...elements: Array<T>): BinaryHeap<T>;
    /**
     * Check whether the index is whithin the heap.
     */
    has(index: number): boolean;
    /**
     * Restores the binary heap.
     */
    heapify(): this;
    /**
     * Checks whether the array is a valid binary heap.
     */
    isHeap(): boolean;
    /**
     * Returns the left child of an element at a given index.
     */
    left(index: number): T;
    /**
     * Returns the parent of an element at a given index.
     */
    parent(index: number): T;
    /**
     * Adds items to the heap.
     *
     * @param elements items to add
     * @return new length of the heap
     */
    push(...elements: Array<T>): number;
    /**
     * Returns the first (min/max) element of the heap and replaces it with a given element.
     *
     * @param element the element to replace the first element of the heap
     * @return the first element of the heap
     */
    replace(element: T): T;
    /**
     * Returns the right child of an element at a given index.
     */
    right(index: number): T;
    /**
     * Extracts the first element of the heap.
     */
    shift(): T | undefined;
    siftDown(start: number): void;
    siftUp(start: number): void;
    /**
     * Changes elements of the heap.
     *
     * @param start starting index
     * @param deleteCount the amount of elements to delete
     * @param items elements to add
     * @return the deleted elements
     */
    splice(start: number, deleteCount?: number, ...items: Array<T>): Array<T>;
    /**
     * Adds elements to the heap.
     *
     * @param items elements to add
     * @return the new length of the heap
     */
    unshift(...items: Array<T>): number;
    /**
     * Updates the position of an element inside the heap.
     *
     * @param index the index of the element to update
     */
    update(index: number): void;
}
