import type { Constructor, TypedArrayConstructors } from "./utility-types.js";
/**
 * Creates a Grid class extending a given Array-like class.
 */
export declare function GridMixin<ItemType = number, U extends Constructor<Array<ItemType>> | TypedArrayConstructors = Constructor<Array<ItemType>>>(Base: U): {
    new (...args: any[]): {
        [key: number]: ItemType;
        size: number;
        /**
         * Number of columns in the grid.
         */
        columns: number;
        /**
         * Number of rows in the grid.
         */
        readonly rows: number;
        getCoordinates(index: number): [row: number, column: number];
        /**
         * Returns the index of an element at given coordinates.
         *
         * @param rows the row index
         * @param columns the column index
         * @return the element index
         */
        getIndex(row: number, column?: number): number;
        /**
         * Returns the element at given coordinates.
         *
         * @param rows the row index
         * @param columns the column index
         * @return the element
         */
        getValue(row: number, column: number): ItemType;
        /**
         * Sets the element at given coordinates.
         *
         * @param rows the row index
         * @param columns the column index
         * @param value the element
         * @return the grid
         */
        setValue(row: number, column: number, value: ItemType): this;
        /**
         * Creates an array of arrays representing rows of the grid.
         *
         * @return an array of arrays
         */
        toArrays(): Array<Array<ItemType>>;
    };
    /**
     * Creates a grid of specified dimensions.
     *
     * @param rows the amount of rows
     * @param columns the amount of columns
     * @return a new grid
     */
    create<T extends any & U>(this: T, rows: number, columns?: number): InstanceType<T>;
    /**
     * Creates a grid from an array of arrays.
     *
     * @param arrays the array of arrays
     * @return a new grid
     */
    fromArrays<T_1 extends any & U>(this: T_1, arrays: Array<Array<ItemType>>): InstanceType<T_1>;
    /**
     * Returns the length of the underlying Array required to hold the grid of specified dimensions.
     *
     * @param rows the amount of rows
     * @param columns the amount of columns
     * @return the required length
     */
    getLength(rows: number, columns?: number): number;
    readonly [Symbol.species]: U;
} & U;
