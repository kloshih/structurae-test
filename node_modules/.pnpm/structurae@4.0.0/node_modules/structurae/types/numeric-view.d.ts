import type { PrimitiveView, ViewConstructor } from "./view-types.js";
export declare class Uint8View extends DataView implements PrimitiveView<number> {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
    static from(value: number): Uint8View;
    static getLength(): number;
    get(): number;
    set(value: number): this;
    toJSON(): number;
    static initialize(): ViewConstructor<number, PrimitiveView<number>>;
}
export declare class Int8View extends Uint8View {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
}
export declare class Int16View extends Uint8View {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
}
export declare class Uint16View extends Uint8View {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
}
export declare class Int32View extends Uint8View {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
}
export declare class Uint32View extends Uint8View {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
}
export declare class Float32View extends Uint8View {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
}
export declare class Float64View extends Uint8View {
    static viewLength: number;
    static decode(view: DataView, start?: number): number;
    static encode(value: number, view: DataView, start?: number): number;
}
export declare class BigInt64View extends DataView implements PrimitiveView<bigint> {
    static viewLength: number;
    static decode(view: DataView, start?: number): bigint;
    static encode(value: bigint, view: DataView, start?: number): number;
    static from(value: bigint): BigInt64View;
    static getLength(): number;
    get(): bigint;
    set(value: bigint): this;
    toJSON(): bigint;
    static initialize(): ViewConstructor<bigint, PrimitiveView<bigint>>;
}
export declare class BigUint64View extends BigInt64View {
    static viewLength: number;
    static decode(view: DataView, start?: number): bigint;
    static encode(value: bigint, view: DataView, start?: number): number;
}
