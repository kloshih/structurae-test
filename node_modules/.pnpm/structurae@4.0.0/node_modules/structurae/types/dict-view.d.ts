import type { ComplexView, ViewConstructor, ViewInstance, ViewSchema } from "./view-types.js";
import type { View } from "./view.js";
import type { ArrayView } from "./array-view.js";
import type { VectorView } from "./vector-view.js";
export declare class DictView<T extends object> extends DataView implements ComplexView<T> {
    static viewLength: number;
    static maxView: DataView;
    static KeysView: typeof ArrayView;
    static ValuesView: typeof VectorView;
    static decode<T>(view: DataView, start?: number): T;
    static encode<T>(value: T, view: DataView, start?: number, length?: number): number;
    static from<T extends object, U extends DictView<T>>(value: T): U;
    static getLength<T>(value: T): number;
    get<P extends keyof T>(key: P): T[P] | undefined;
    getLength<P extends keyof T>(key: P): number;
    getOffset<P extends keyof T>(key: P): [number, number] | undefined;
    getView<P extends keyof T>(key: P): ViewInstance<T[P]> | undefined;
    indexOf<P extends keyof T>(key: P): number;
    set<P extends keyof T>(key: P, value: T[P]): undefined;
    setView<P extends keyof T>(key: P, value: DataView): undefined;
    toJSON(): T;
    static initialize<T extends object>(schema: ViewSchema<T>, Factory: View): ViewConstructor<T, ComplexView<T>>;
}
